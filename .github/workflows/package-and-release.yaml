name: Package and Release

on: [pull_request]
#  workflow_dispatch:
#    inputs:
#      release_version:
#        description: 'Version to be released'
#        required: true

jobs:
  create-man:
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '2.6'
    - name: Create man page
      run: |
        set -x -e
        gem install ronn

        ronn doc/USAGE.markdown
        # Must be gzipped, otherwise debian does not install it
        gzip doc/USAGE
    - name: Upload man page
      uses: actions/upload-artifact@v1.0.0
      with:
        name: q-man-page
        path: doc/USAGE.gz

  build-linux:
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache pyox
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pyoxidizer
        key: ${{ runner.os }}-pyox
    - name: Install pyoxidizer
      run: |
        set -e -x

        sudo apt-get update
        sudo apt-get install -y zip sqlite3 rpm

        curl -o pyoxidizer.zip -L "https://github.com/indygreg/PyOxidizer/releases/download/pyoxidizer%2F0.17/pyoxidizer-0.17.0-linux_x86_64.zip"
        unzip pyoxidizer.zip
        chmod +x ./pyoxidizer
    - name: Create Q Executable - Linux
      run: |
        set -e -x

        ./pyoxidizer build --release

        export Q_EXECUTABLE=./build/x86_64-unknown-linux-gnu/release/install/q
        chmod 755 $Q_EXECUTABLE

        seq 1 100 | $Q_EXECUTABLE -c 1 "select sum(c1),count(*) from -" -S test.sqlite

        mkdir -p packages/linux/
        cp $Q_EXECUTABLE packages/linux/linux-q
    - name: Upload Linux Executable
      uses: actions/upload-artifact@v1.0.0
      with:
        name: linux-q
        path: packages/linux/linux-q

  test-linux:
    needs: build-linux
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Python for Testing
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.12'
        architecture: 'x64'
    - name: Prepare Testing
      run: |
        set -e -x

        pip3 install -r test-requirements.txt
    - name: Download Linux Executable
      uses: actions/download-artifact@v2
      with:
        name: linux-q
    - name: Run Tests on Linux Executable
      run: |
        set -x -e

        find ./ -ls

        chmod 755 ./linux-q

        Q_EXECUTABLE=../linux-q bash -x test/test-all
  package-linux-deb:
    needs: [test-linux, create-man]
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '2.6'
    - name: Downoad man page
      uses: actions/download-artifact@v2
      with:
        name: q-man-page
    - name: Download Linux Executable
      uses: actions/download-artifact@v2
      with:
        name: linux-q
    - name: Build DEB Package
      run: |
        set -e -x

        mkdir -p packages/linux/

        find ./ -ls

        chmod 755 ./linux-q

        gem install fpm
        cp dist/fpm-config ~/.fpm
        fpm -s dir -t deb --deb-use-file-permissions -p packages/linux/q-text-as-data-2.0.20-1.x86_64.deb --version 2.0.20 ./linux-q=/usr/bin/q USAGE.gz=/usr/share/man/man1/q.1.gz
    - name: Test DEB Package Installation
      continue-on-error: true
      run: ./dist/test-using-deb.sh packages/linux/q-text-as-data-2.0.20-1.x86_64.deb
    - name: Upload DEB Package
      uses: actions/upload-artifact@v1.0.0
      with:
        name: q-text-as-data-2.0.20-1.x86_64.deb
        path: packages/linux/q-text-as-data-2.0.20-1.x86_64.deb

  package-linux-rpm:
    needs: [test-linux, create-man]
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '2.6'
    - name: Download man page
      uses: actions/download-artifact@v2
      with:
        name: q-man-page
    - name: Download Linux Executable
      uses: actions/download-artifact@v2
      with:
        name: linux-q
    - name: Build RPM Package
      run: |
        set -e -x

        mkdir -p packages/linux

        find ./ -ls

        chmod 755 ./linux-q

        gem install fpm
        cp dist/fpm-config ~/.fpm
        fpm -s dir -t rpm --rpm-use-file-permissions -p packages/linux/q-text-as-data-2.0.20.x86_64.rpm --version 2.0.20 ./linux-q=/usr/bin/q USAGE.gz=/usr/share/man/man1/q.1.gz
    - name: Retest using RPM
      continue-on-error: true
      run: ./dist/test-using-rpm.sh packages/linux/q-text-as-data-2.0.20.x86_64.rpm
    - name: Upload RPM Package
      uses: actions/upload-artifact@v1.0.0
      with:
        name: q-text-as-data-2.0.20.x86_64.rpm
        path: packages/linux/q-text-as-data-2.0.20.x86_64.rpm

  build-mac:
    runs-on: macos-11
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache pyox
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pyoxidizer
        key: ${{ runner.os }}-pyox
    - name: Install pyoxidizer
      run: |
        set -e -x

        curl -o  pyoxidizer.zip -L "https://github.com/indygreg/PyOxidizer/releases/download/pyoxidizer%2F0.17/pyoxidizer-0.17.0-macos-universal.zip"
        unzip pyoxidizer.zip
        mv macos-universal/pyoxidizer ./pyoxidizer

        chmod +x ./pyoxidizer
    - name: Create Q Executable - Mac
      run: |
        set -e -x

        ./pyoxidizer build --release

        export Q_EXECUTABLE=./build/x86_64-apple-darwin/release/install/q
        chmod 755 $Q_EXECUTABLE

        seq 1 100 | $Q_EXECUTABLE -c 1 "select sum(c1),count(*) from -" -S test.sqlite

        mkdir -p packages/macos/
        cp $Q_EXECUTABLE packages/macos/macos-q
    - name: Upload MacOS Executable
      uses: actions/upload-artifact@v1.0.0
      with:
        name: macos-q
        path: packages/macos/macos-q

  test-mac:
    needs: build-mac
    runs-on: macos-11
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Python for Testing
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.12'
        architecture: 'x64'
    - name: Prepare Testing
      run: |
        set -e -x

        pip3 install wheel

        pip3 install -r test-requirements.txt
    - name: Download MacOS Executable
      uses: actions/download-artifact@v2
      with:
        name: macos-q
    - name: Run Tests on MacOS Executable
      run: |
        set -e -x

        find ./ -ls

        chmod 755 ./macos-q

        Q_EXECUTABLE=../macos-q bash -x test/test-all

  package-mac:
    needs: [test-mac, create-man]
    runs-on: macos-11
    if: ${{ false }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install MSVC build tools
      uses: ilammy/msvc-dev-cmd@v1
    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.10'
        architecture: 'x64'
    - name: Install pyoxidizer
      shell: bash
      run: |
        set -x -e

        python3 -V
        pip3 -V

        pip3 install pyoxidizer
    - name: Create Q Executable - Windows
      shell: bash
      run: |
        set -e -x

        pyoxidizer build --release

        export Q_EXECUTABLE=./build/x86_64-pc-windows-msvc/release/install/q
        chmod 755 $Q_EXECUTABLE

        seq 1 100 | $Q_EXECUTABLE -c 1 "select sum(c1),count(*) from -" -S test.sqlite

        mkdir -p packages/windows/
        cp $Q_EXECUTABLE packages/windows/win-q.exe

        find ./ -ls
    - name: Upload Linux Executable
      uses: actions/upload-artifact@v1.0.0
      with:
        name: win-q
        path: packages/windows/win-q.exe

  test-windows:
    needs: build-windows
    runs-on: windows-latest
    if: ${{ false }}
    steps:
    - name: Install Python for Testing
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.12'
        architecture: 'x64'
    - name: Prepare Testing
      run: |
        set -e -x

        pip3 install wheel

        pip3 install -r test-requirements.txt
    - name: Download Windows Executable
      uses: actions/download-artifact@v2
      with:
        name: win-q
    - name: Run Tests on Windows Executable
      run: |
        set -e -x

        find ./ -ls

        chmod 755 ./win-q.exe

        Q_EXECUTABLE=../win-q.exe bash -x test/test-all

  package-windows:
    needs: [test-windows, create-man]
    runs-on: windows-latest
    steps:
      name: TBD Package windows to an installable MSI
      run: |
        set -e -x

        echo "Need to create a proper MSI for the executable"

  release-new-version:
    needs: [package-linux-deb, package-linux-rpm, package-mac, package-windows]
    runs-on: ubuntu-18.04
    steps:
    - name: Upload All Artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: packages
        path: packages
