name: Package and Release

on: [pull_request]
#  workflow_dispatch:
#    inputs:
#      release_version:
#        description: 'Version to be released'
#        required: true


jobs:
  Package-Linux-Version:
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install stuff
      run: |
        set -e
        set -x

        sudo apt-get update
        sudo apt-get install -y zip

        curl -o  pyoxidizer.zip -L "https://github.com/indygreg/PyOxidizer/releases/download/pyoxidizer%2F0.17/pyoxidizer-0.17.0-linux_x86_64.zip"
        unzip pyoxidizer.zip
        chmod +x ./pyoxidizer

        sudo apt-get install -y sqlite3 rpm
    - name: Create Executable
      run: |
        set -e
        ./pyoxidizer build --release

        export Q_EXECUTABLE=./build/x86_64-unknown-linux-gnu/release/install/q

        seq 1 100 | $Q_EXECUTABLE -c 1 "select sum(c1),count(*) from -"

        mkdir -p artifacts/linux/
        cp $Q_EXECUTABLE artifacts/linux/
    - name: Install Python for Testing
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.12'
        architecture: 'x64'
    - name: Prepare Testing
      run: |
        set -e
        
        pip3 install -r test-requirements.txt
    - name: Run Tests
      run: |
        Q_EXECUTABLE=../build/x86_64-unknown-linux-gnu/release/install/q bash -x test/test-all

    - name: Render RPM Spec
      id: render_spec
      uses: chuhlomin/render-template@v1.2
      with:
        template: dist/q.spec.template
        vars: |
          Q_VERSION: "2.0.20"
          Q_EXECUTABLE: "./build/x86_64-unknown-linux-gnu/release/install/q"
    - name: Prepare rpmbuild folders
      run: |
        set -e
        set -x

        mkdir -p ./rpmbuild/{SOURCES,SPECS,BUILD,RPMS,SRPMS,BUILDROOT}

        echo '${{ steps.render_spec.outputs.result }}' > ./rpmbuild/SPECS/q.spec

        ./package-sources.sh

        cp q-sources.tar.gz ./rpmbuild/SOURCES/q-sources.tar.gz
    - name: build RPM package
      run: |
        set -e
        set -x

        rpmbuild -v --define "_topdir `pwd`/rpmbuild" -ba ./rpmbuild/SPECS/q.spec

        cp -r ./rpmbuild/RPMS/* artifacts/linux/
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: artifacts
        path: artifacts/

  Package-Mac-Version:
    runs-on: macos-11
    if: ${{ false }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install stuff
      run: |
        set -e
        set -x

        curl -o  pyoxidizer.zip -L "https://github.com/indygreg/PyOxidizer/releases/download/pyoxidizer%2F0.17/pyoxidizer-0.17.0-macos-universal.zip"
        unzip pyoxidizer.zip
        mv macos-universal/pyoxidizer ./pyoxidizer

        chmod +x ./pyoxidizer

        # no need to install sqlite on a mac

    - name: Create Executable
      run: |
        set -e
        set -x

        ./pyoxidizer build --release

        find ./build/

        export Q_EXECUTABLE=./build/x86_64-apple-darwin/release/install/q

        seq 1 100 | $Q_EXECUTABLE -c 1 "select sum(c1),count(*) from -"

        mkdir -p artifacts/macos/
        cp $Q_EXECUTABLE artifacts/macos/

    - name: Upload Artifact - TBD Move to the end
      uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: artifacts/
    - name: Install Python for Testing
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.12'
        architecture: 'x64'
    - name: Prepare Testing
      run: |
        set -e

        pip3 install -r test-requirements.txt
    - name: Run Tests
      run: |
        Q_EXECUTABLE=../build/x86_64-apple-darwin/release/install/q bash -x test/test-all

  Package-Windows-Version:
    runs-on: windows-latest
    if: ${{ false }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install MSVC build tools
      uses: ilammy/msvc-dev-cmd@v1
    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.10'
        architecture: 'x64'
#    - name: Install sqlite3
#      shell: bash
#      run: |
#        set -x
#        set -e
#
#        mkdir artifacts/
#        find / -ls > artifacts/file-list.txt
    - name: Install pyoxidizer
      shell: bash
      run: |
        set -x
        set -e

        python3 -V
        pip3 -V

        pip3 install pyoxidizer
    - name: Create Executable
      shell: bash
      run: |
        set -e
        set -x

        pyoxidizer build --release

        find ./build/

        export Q_EXECUTABLE=./build/x86_64-pc-windows-msvc/release/install/q

        seq 1 100 | $Q_EXECUTABLE -c 1 "select sum(c1),count(*) from -"

        mkdir -p artifacts/windows/
        cp $Q_EXECUTABLE artifacts/windows/
    - name: Upload Artifact - TBD Move to the end
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: artifacts
        path: artifacts/
    - name: Prepare Testing
      run: |
        set -e

        pip3 install -r test-requirements.txt
    - name: Run Tests
      run: |
        Q_EXECUTABLE=../build/x86_64-pc-windows-msvc/release/install/q bash -x test/test-all

#    - name: Create release for ${{ github.event.client_payload.ReleaseBranchName }}
#      uses: actions/create-release@v1.1.1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: ${{ github.event.client_payload.ReleaseBranchName }}
#        release_name: ${{ github.event.client_payload.ReleaseTitle }}
#        body: ${{ github.event.client_payload.ReleaseBody }}
#        prerelease: ${{ github.event.client_payload.Prerelease }}
#        commitish: ${{ github.event.client_payload.Commitish }}
