{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"q - Run SQL directly on CSV or TSV files \u00b6 Overview \u00b6 q's purpose is to bring SQL expressive power to the Linux command line by providing easy access to text as actual data, and allowing direct access to multi-file sqlite3 databases. q <flags> <sql-query> q allows the following: Performing SQL-like statements directly on tabular text data, auto-caching the data in order to accelerate additional querying on the same file # Simple query from a file, columns are named c1...cN q \"select c1,c5 from myfile.csv\" # -d '|' sets the input delimiter, -H says there's a header q -d , -H \"select my_field from myfile.delimited-file-with-pipes\" # -C readwrite writes a cache for the csv file q -d , -H \"select my_field from myfile.csv\" -C readwrite # -C read tells q to use the cache q -d , -H \"select my_field from myfile.csv\" -C read # Setting the default caching mode (`-C`) can be done by writing a `~/.qrc` file Performing SQL statements directly on multi-file sqlite3 databases, without having to merge them or load them into memory q \"select * from mydatabase.sqlite:::my_table_name\" or q \"select * from mydatabase.sqlite\" if the database file contains only one table # sqlite files are autodetected, no need for any special filename extension The following table shows the impact of using caching: Rows Columns File Size Query time without caching Query time with caching Speed Improvement 5,000,000 100 4.8GB 4 minutes, 47 seconds 1.92 seconds x149 1,000,000 100 983MB 50.9 seconds 0.461 seconds x110 1,000,000 50 477MB 27.1 seconds 0.272 seconds x99 100,000 100 99MB 5.2 seconds 0.141 seconds x36 100,000 50 48MB 2.7 seconds 0.105 seconds x25 Notice that for the current version, caching is not enabled by default, since the caches take disk space. Use -C readwrite or -C read to enable it for a query, or add caching_mode to .qrc to set a new default. q treats ordinary files as database tables, and supports all SQL constructs, such as WHERE , GROUP BY , JOIN s, etc. It supports automatic column name and type detection, and provides full support for multiple character encodings. The new features - autocaching, direct querying of sqlite database and the use of ~/.qrc file are described in detail in here . Download the tool using the links in the installation below and play with it. Encodings \u00b6 \u5b8c\u5168\u652f\u6301\u6240\u6709\u7684\u5b57\u7b26\u7f16\u7801 \u3059\u3079\u3066\u306e\u6587\u5b57\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5b8c\u5168\u306b\u30b5\u30dd\u30fc\u30c8 \ubaa8\ub4e0 \ubb38\uc790 \uc778\ucf54\ub529\uc774 \uc644\ubcbd\ud558\uac8c \uc9c0\uc6d0\ub429\ub2c8\ub2e4 \u0432\u0441\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f Non-english users: q fully supports all types of encoding. Use -e data-encoding to set the input data encoding, -Q query-encoding to set the query encoding, and use -E output-encoding to set the output encoding. Sensible defaults are in place for all three parameters. Please contact me if you encounter any issues and I'd be glad to help. Files with BOM: Files which contain a BOM ( Byte Order Mark ) are not properly supported inside python's csv module. q contains a workaround that allows reading UTF8 files which contain a BOM - Use -e utf-8-sig for this. I plan to separate the BOM handling from the encoding itself, which would allow to support BOMs for all encodings. Installation \u00b6 Format Instructions Comments OSX brew install will install the previous 2.0.19 for now, until homebrew approves the new version. In the mean time, you can download the new version executable from the link, chmod +x it and then run. You might need to run it the first time from Finder using Right-Click -> Open, and then click the Open button. After the first time, it will run from the command line without any issues. A man page is available, just run man q RPM Package run rpm -ivh <package-filename> or rpm -U <package-filename> if you already have an older version of q. A man page is available for this release. Just enter man q . DEB Package Run sudo dpkg -i <package-filename> A man page is available for this release. Just enter man q . Some installations don't install the man page properly for some reason. I'll fix this soon Windows Installer Run the installer executable and hit next next next... q.exe will be added to the PATH so you can access it everywhere. Windows doesn't update the PATH retroactively for open windows, so you'll need to open a new cmd / bash window after the installation is done. Source tar.gz Full source file tree for latest stable version. Note that q.py cannot be used directly anymore, as it requires python dependencies Source zip Full source file tree for the latest stable version. Note that q.py cannot be used directly anymore, as it requires python dependencies I will add packages for additional Linux Distributions if there's demand for it. If you're interested in another Linux distribution, please ping me. It's relatively easy to add new ones with the new packaging flow. The previous version 2.0.19 can be downloaded directly from here . Please let me know if for some reason the new version is not suitable for your needs, and you're planning on using the previous one. Requirements \u00b6 q is packaged as a compiled standalone-executable that has no dependencies, not even python itself. This was done by using the awesome pyoxidizer project. Examples \u00b6 This section shows example flows that highlight the main features. For more basic examples, see here . Basic Examples: \u00b6 # Prepare some data $ seq 1 1000000 > myfile.csv # Query it $ q \"select sum(c1),count(*) from myfile.csv where c1 % 3 = 0\" 166666833333 333333 # Use q to query from stdin $ ps -ef | q -b -H \"SELECT UID, COUNT(*) cnt FROM - GROUP BY UID ORDER BY cnt DESC LIMIT 3\" 501 288 0 115 270 17 Auto-caching Examples \u00b6 # (time command output has been shortened for berevity) # Prepare some data $ seq 1 1000000 > myfile.csv # Read from the resulting file $ time q \"select sum(c1),count(*) from myfile.csv\" 500000500000 1000000 total_time=4.108 seconds # Running with `-C readwrite` auto-creates a cache file if there is none. The cache filename would be myfile.csv.qsql. The query runs as usual $ time q \"select sum(c1),count(*) from myfile.csv\" -C readwrite 500000500000 1000000 total_time=4.057 seconds # Now run with `-C read`. The query will run from the cache file and not the original. As the file gets bigger, the difference will be much more noticable $ time q \"select sum(c1),count(*) from myfile.csv\" -C read 500000500000 1000000 total_time=0.229 seconds # Now let's try another query on that file. Notice the short query duration. The cache is being used for any query that uses this file, and queries on multiple files that contain caches will reuse the cache as well. $ time q \"select avg(c1) from myfile.csv\" -C read 500000.5 total_time=0.217 seconds # You can also query the qsql file directly, as it's just a standard sqlite3 DB file (see next section for q's support of reading directly from sqlite DBs) $ time q \"select sum(c1),count(*) from myfile.csv.qsql\" 500000500000 1000000 total_time=0.226 seconds # Now let's delete the original csv file (be careful when deleting original data) $ rm -vf myfile.csv # Running another query directly on the qsql file just works $ time q \"select sum(c1),count(*) from myfile.csv.qsql\" 500000500000 1000000 total_time=0.226 seconds # See the `.qrc` section below if you want to set the default `-C` (`--caching-mode`) to something other than `none` (the default) Direct sqlite Querying Examples \u00b6 # Download example sqlite3 database from https://www.sqlitetutorial.net/sqlite-sample-database/ and unzip it. The resulting file will be chinook.db $ curl -L https://www.sqlitetutorial.net/wp-content/uploads/2018/03/chinook.zip | tar -xvf - # Now we can query the database directly, specifying the name of the table in the query (<db_name>:::<table_name>) $ q \"select count(*) from chinook.db:::albums\" 347 # Let's take the top 5 longest tracks of album id 34. The -b option just beautifies the output, and -O tells q to output the column names as headers $ q \"select * from chinook.db:::tracks where albumid = '34' order by milliseconds desc limit 5\" -b -O TrackId Name AlbumId MediaTypeId GenreId Composer Milliseconds Bytes UnitPrice 407 \"S\u00f3 Tinha De Ser Com Voc\u00ea\" 34 1 7 V\u00e1rios 389642 13085596 0.99 398 \"Only A Dream In Rio\" 34 1 7 V\u00e1rios 371356 12192989 0.99 393 \"Tarde Em Itapo\u00e3\" 34 1 7 V\u00e1rios 313704 10344491 0.99 401 \"Momentos Que Marcam\" 34 1 7 V\u00e1rios 280137 9313740 0.99 391 \"Garota De Ipanema\" 34 1 7 V\u00e1rios 279536 9141343 0.99 # Let's now copy the chinook database to another file, as if it's just another different database $ cp chinook.db another_db.db # Now we can run a join query between the two databases. They could have been any two different databases, using the copy of chinook is just for simplicity # Let's get the top-5 longest albums, using albums from the first database and tracks from the second database. The track times are converted to seconds, and rounded to two digits after the decimal point. $ q -b -O \"select a.title,round(sum(t.milliseconds)/1000.0/60,2) total_album_time_seconds from chinook.db:::albums a left join another_database.db:::tracks t on (a.albumid = t.albumid) group by a.albumid order by total_album_time_seconds desc limit 5\" Title total_album_time_seconds \"Lost, Season 3\" 1177.76 \"Battlestar Galactica (Classic), Season 1\" 1170.23 \"Lost, Season 1\" 1080.92 \"Lost, Season 2\" 1054.83 \"Heroes, Season 1\" 996.34 Analysis Examples \u00b6 # Let's create a simple CSV file without a header. Make sure to copy only the three lines, press enter, and # then press Ctrl-D to exit so the file will be written. $ cat > some-data-without-header.csv harel,1,2 ben,3,4 attia,5,6 <Ctrl-D> # Let's run q on it with -A, to see the detected structure of the file. `-d ,` sets the delimiter to a comma $ q -d , \"select * from some-data-without-header.csv\" -A Table: /Users/harelben-attia/dev/harelba/q/some-data-without-header.csv Sources: source_type: file source: /Users/harelben-attia/dev/harelba/q/some-data-without-header.csv Fields: `c1` - text `c2` - int `c3` - int # Now let's create another simple CSV file, this time with a header (-H tells q to expect a header in the file) $ cat > some-data.csv planet_id,name,diameter_km,length_of_day_hours 1000,Earth,12756,24 2000,Mars,6792,24.7 3000,Jupiter,142984,9.9 <Ctrl-D> # Let's run q with -A to see the analysis results. $ q -b -O -H -d , \"select * from some-data.csv\" -A Table: /Users/harelben-attia/dev/harelba/q/some-data.csv Sources: source_type: file source: /Users/harelben-attia/dev/harelba/q/some-data.csv Fields: `planet_id` - int `name` - text `diameter_km` - int `length_of_day_hours` - real # Let's run it with `-C readwrite` so a cache will be created $ q -b -O -H -d , \"select * from some-data.csv\" -C readwrite planet_id,name ,diameter_km,length_of_day_hours 1000 ,Earth ,12756 ,24.0 2000 ,Mars ,6792 ,24.7 3000 ,Jupiter,142984 ,9.9 # Running another query that uses some-data.csv with -A will now show that a qsql exists for that file. The source-type # will be \"file-with-unused-qsql\". The qsql cache is not being used, since by default, q does not activate caching # so backward compatibility is maintained $ q -b -O -H -d , \"select * from some-data.csv\" -A Table: /Users/harelben-attia/dev/harelba/q/some-data.csv Sources: source_type: file-with-unused-qsql source: /Users/harelben-attia/dev/harelba/q/some-data.csv Fields: `planet_id` - int `name` - text `diameter_km` - int `length_of_day_hours` - real # Now let's run another query, this time with `-C read`, telling q to use the qsql caches. This time source-type will # be \"qsql-file-with-original\", and the cache will be used when querying: $ q -b -O -H -d , \"select * from some-data.csv\" -A -C read Table: /Users/harelben-attia/dev/harelba/q/some-data.csv Sources: source_type: qsql-file-with-original source: /Users/harelben-attia/dev/harelba/q/some-data.csv.qsql Fields: `planet_id` - int `name` - text `diameter_km` - int `length_of_day_hours` - real # Let's now read directly from the qsql file. Notice the change in the table name inside the query. `-C read` is not needed # here. The source-type will be \"qsql-file\" $ q -b -O -H -d , \"select * from some-data.csv.qsql\" -A Table: /Users/harelben-attia/dev/harelba/q/some-data.csv.qsql Sources: source_type: qsql-file source: /Users/harelben-attia/dev/harelba/q/some-data.csv.qsql Fields: `planet_id` - int `name` - text `diameter_km` - int `length_of_day_hours` - real Usage \u00b6 Query should be an SQL-like query which contains filenames instead of table names (or - for stdin). The query itself should be provided as one parameter to the tool (i.e. enclosed in quotes). All sqlite3 SQL constructs are supported, including joins across files (use an alias for each table). Take a look at the limitations section below for some rarely-used use cases which are not fully supported. q gets a full SQL query as a parameter. Remember to double-quote the query. Historically, q supports multiple queries on the same command-line, loading each data file only once, even if it is used by multiple queries on the same q invocation. This is still supported. However, due to the new automatic-caching capabilities, this is not really required. Activate caching, and a cache file will be automatically created for each file. q Will use the cache behind the scenes in order to speed up queries. The speed up is extremely significant, so consider using caching for large files. The following filename types are supported: Delimited-file filenames - including relative/absolute paths. E.g. ./my_folder/my_file.csv or /var/tmp/my_file.csv sqlite3 database filenames With Multiple Tables - Add an additional :::<table_name> for accessing a specific table. For example mydatabase.sqlite3:::users_table . With One Table Only - Just specify the database filename, no need for a table name postfix. For example my_single_table_database.sqlite . .qsql cache files - q can auto-generate cache files for delimited files, and they can be queried directly as a table, since they contain only one table, as they are essentially standard sqlite datbases Use -H to signify that the input contains a header line. Column names will be detected automatically in that case, and can be used in the query. If this option is not provided, columns will be named cX, starting with 1 (e.g. q \"SELECT c3,c8 from ...\" ). Use -d to specify the input delimiter. Column types are auto detected by the tool, no casting is needed. Note that there's a flag --as-text which forces all columns to be treated as text columns. Please note that column names that include spaces need to be used in the query with back-ticks, as per the sqlite standard. Make sure to use single-quotes around the query, so bash/zsh won't interpret the backticks. Query/Input/Output encodings are fully supported (and q tries to provide out-of-the-box usability in that area). Please use -e , -E and -Q to control encoding if needed. JOINs are supported and Subqueries are supported in the WHERE clause, but unfortunately not in the FROM clause for now. Use table aliases when performing JOINs. The SQL syntax itself is sqlite's syntax. For details look at http://www.sqlite.org/lang.html or search the net for examples. NOTE: When using the -O output header option, use column name aliases if you want to control the output column names. For example, q -O -H \"select count(*) cnt,sum(*) as mysum from -\" would output cnt and mysum as the output header column names. Options: -h, --help show this help message and exit -v, --version Print version -V, --verbose Print debug info in case of problems -S SAVE_DB_TO_DISK_FILENAME, --save-db-to-disk=SAVE_DB_TO_DISK_FILENAME Save database to an sqlite database file -C CACHING_MODE, --caching-mode=CACHING_MODE Choose the autocaching mode (none/read/readwrite). Autocaches files to disk db so further queries will be faster. Caching is done to a side-file with the same name of the table, but with an added extension .qsql --dump-defaults Dump all default values for parameters and exit. Can be used in order to make sure .qrc file content is being read properly. --max-attached-sqlite-databases=MAX_ATTACHED_SQLITE_DATABASES Set the maximum number of concurrently-attached sqlite dbs. This is a compile time definition of sqlite. q's performance will slow down once this limit is reached for a query, since it will perform table copies in order to avoid that limit. --overwrite-qsql=OVERWRITE_QSQL When used, qsql files (both caches and store-to-db) will be overwritten if they already exist. Use with care. Input Data Options: -H, --skip-header Skip header row. This has been changed from earlier version - Only one header row is supported, and the header row is used for column naming -d DELIMITER, --delimiter=DELIMITER Field delimiter. If none specified, then space is used as the delimiter. -p, --pipe-delimited Same as -d '|'. Added for convenience and readability -t, --tab-delimited Same as -d <tab>. Just a shorthand for handling standard tab delimited file You can use $'\\t' if you want (this is how Linux expects to provide tabs in the command line -e ENCODING, --encoding=ENCODING Input file encoding. Defaults to UTF-8. set to none for not setting any encoding - faster, but at your own risk... -z, --gzipped Data is gzipped. Useful for reading from stdin. For files, .gz means automatic gunzipping -A, --analyze-only Analyze sample input and provide information about data types -m MODE, --mode=MODE Data parsing mode. fluffy, relaxed and strict. In strict mode, the -c column-count parameter must be supplied as well -c COLUMN_COUNT, --column-count=COLUMN_COUNT Specific column count when using relaxed or strict mode -k, --keep-leading-whitespace Keep leading whitespace in values. Default behavior strips leading whitespace off values, in order to provide out-of-the-box usability for simple use cases. If you need to preserve whitespace, use this flag. --disable-double-double-quoting Disable support for double double-quoting for escaping the double quote character. By default, you can use \"\" inside double quoted fields to escape double quotes. Mainly for backward compatibility. --disable-escaped-double-quoting Disable support for escaped double-quoting for escaping the double quote character. By default, you can use \\\" inside double quoted fields to escape double quotes. Mainly for backward compatibility. --as-text Don't detect column types - All columns will be treated as text columns -w INPUT_QUOTING_MODE, --input-quoting-mode=INPUT_QUOTING_MODE Input quoting mode. Possible values are all, minimal and none. Note the slightly misleading parameter name, and see the matching -W parameter for output quoting. -M MAX_COLUMN_LENGTH_LIMIT, --max-column-length-limit=MAX_COLUMN_LENGTH_LIMIT Sets the maximum column length. -U, --with-universal-newlines Expect universal newlines in the data. Limitation: -U works only with regular files for now, stdin or .gz files are not supported yet. Output Options: -D OUTPUT_DELIMITER, --output-delimiter=OUTPUT_DELIMITER Field delimiter for output. If none specified, then the -d delimiter is used if present, or space if no delimiter is specified -P, --pipe-delimited-output Same as -D '|'. Added for convenience and readability. -T, --tab-delimited-output Same as -D <tab>. Just a shorthand for outputting tab delimited output. You can use -D $'\\t' if you want. -O, --output-header Output header line. Output column-names are determined from the query itself. Use column aliases in order to set your column names in the query. For example, 'select name FirstName,value1/value2 MyCalculation from ...'. This can be used even if there was no header in the input. -b, --beautify Beautify output according to actual values. Might be slow... -f FORMATTING, --formatting=FORMATTING Output-level formatting, in the format X=fmt,Y=fmt etc, where X,Y are output column numbers (e.g. 1 for first SELECT column etc. -E OUTPUT_ENCODING, --output-encoding=OUTPUT_ENCODING Output encoding. Defaults to 'none', leading to selecting the system/terminal encoding -W OUTPUT_QUOTING_MODE, --output-quoting-mode=OUTPUT_QUOTING_MODE Output quoting mode. Possible values are all, minimal, nonnumeric and none. Note the slightly misleading parameter name, and see the matching -w parameter for input quoting. -L, --list-user-functions List all user functions Query Related Options: -q QUERY_FILENAME, --query-filename=QUERY_FILENAME Read query from the provided filename instead of the command line, possibly using the provided query encoding (using -Q). -Q QUERY_ENCODING, --query-encoding=QUERY_ENCODING query text encoding. Experimental. Please send your feedback on this Setting the default values for parameters \u00b6 It's possible to set default values for parameters which are used often by configuring them in the file ~/.qrc . The file format is as follows: [options] <setting>=<default-value> It's possible to generate a default .qrc file by running q --dump-defaults and write the output into the .qrc file. One valuable use-case for this could be setting the caching-mode to read . This will make q automatically use generated .qsql cache files if they exist. Whenever you want a cache file to be generated, just use -C readwrite and a .qsql file will be generated if it doesn't exist. Here's the content of the ~/.qrc file for enabling cache reads by default: [options] caching_mode=read Getting Started Examples \u00b6 This section shows some more basic examples of simple SQL constructs. For some more complex use-cases, see the examples at the beginning of the documentation. NOTES: The -H flag in the examples below signifies that the file has a header row which is used for naming columns. The -t flag is just a shortcut for saying that the file is a tab-separated file (any delimiter is supported - Use the -d flag). Queries are given using upper case for clarity, but actual query keywords such as SELECT and WHERE are not really case sensitive. Basic Example List: Example 1 - COUNT DISTINCT values of specific field (uuid of clicks data) Example 2 - Filter numeric data, controlling ORDERing and LIMITing output Example 3 - Illustrate GROUP BY Example 4 - More complex GROUP BY (group by time expression) Example 5 - Read input from standard input Example 6 - Use column names from header row Example 7 - JOIN two files Example 1 \u00b6 Perform a COUNT DISTINCT values of specific field (uuid of clicks data). q -H -t \"SELECT COUNT(DISTINCT(uuid)) FROM ./clicks.csv\" Output 229 Example 2 \u00b6 Filter numeric data, controlling ORDERing and LIMITing output Note that q understands that the column is numeric and filters according to its numeric value (real numeric value comparison, not string comparison). q -H -t \"SELECT request_id,score FROM ./clicks.csv WHERE score > 0.7 ORDER BY score DESC LIMIT 5\" Output: 2cfab5ceca922a1a2179dc4687a3b26e 1.0 f6de737b5aa2c46a3db3208413a54d64 0.986665809568 766025d25479b95a224bd614141feee5 0.977105183282 2c09058a1b82c6dbcf9dc463e73eddd2 0.703255121794 Example 3 \u00b6 Illustrate GROUP BY q -t -H \"SELECT hashed_source_machine,count(*) FROM ./clicks.csv GROUP BY hashed_source_machine\" Output: 47d9087db433b9ba.domain.com 400000 Example 4 \u00b6 More complex GROUP BY (group by time expression) q -t -H \"SELECT strftime('%H:%M',date_time) hour_and_minute,count(*) FROM ./clicks.csv GROUP BY hour_and_minute\" Output: 07:00 138148 07:01 140026 07:02 121826 Example 5 \u00b6 Read input from standard input Calculates the total size per user/group in the /tmp subtree. sudo find /tmp -ls | q \"SELECT c5,c6,sum(c7)/1024.0/1024 AS total FROM - GROUP BY c5,c6 ORDER BY total desc\" Output: mapred hadoop 304.00390625 root root 8.0431451797485 smith smith 4.34389972687 Example 6 \u00b6 Use column names from header row Calculate the top 3 user ids with the largest number of owned processes, sorted in descending order. Note the usage of the autodetected column name UID in the query. ps -ef | q -H \"SELECT UID,COUNT(*) cnt FROM - GROUP BY UID ORDER BY cnt DESC LIMIT 3\" Output: root 152 harel 119 avahi 2 Example 7 \u00b6 JOIN two files The following command joins an ls output (exampledatafile) and a file containing rows of group-name,email (group-emails-example) and provides a row of filename,email for each of the emails of the group. For brevity of output, there is also a filter for a specific filename called ppp which is achieved using a WHERE clause. q \"SELECT myfiles.c8,emails.c2 FROM exampledatafile myfiles JOIN group-emails-example emails ON (myfiles.c4 = emails.c1) WHERE myfiles.c8 = 'ppp'\" Output: ppp dip.1@otherdomain.com ppp dip.2@otherdomain.com You can see that the ppp filename appears twice, each time matched to one of the emails of the group dip to which it belongs. Take a look at the files exampledatafile and group-emails-example for the data. Column name detection is supported for JOIN scenarios as well. Just specify -H in the command line and make sure that the source files contain the header rows. Implementation \u00b6 Behind the scenes q creates a \"virtual\" sqlite3 database that does not contain data of its own, but attaches to multiple other databases as follows: When reading delimited files or data from stdin , it will analyze the data and construct an in-memory \"adhoc database\" that contains it. This adhoc database will be attached to the virtual database When a delimited file has a .qsql cache, it will attach to that file directly, without having to read it into memory When querying a standard sqlite3 file, it will be attached to the virtual database to it as well, without reading it into memory. sqlite3 files are auto-detected, no need for any special filename extension The user query will be executed directly on the virtual database, using the attached databases. sqlite3 itself has a limit on the number of attached databases (usually 10). If that limit is reached, q will automatically attach databases until that limit is reached, and will load additional tables into the adhoc database's in-memory database. Please make sure to read the limitations section as well. Development \u00b6 Tests \u00b6 The code includes a test suite runnable through run-tests.sh . By default, it uses the python source code for running the tests. However, it is possible to provide a path to an actual executable to the tests using the Q_EXECUTABLE env var. This is actually being used during the build and packaging process, in order to test the resulting binary. Limitations \u00b6 Here's the list of known limitations. Please contact me if you have a use case that needs any of those missing capabilities. Common Table Expressions (CTE) are not supported for now. Will be implemented soon - See here and here for details. FROM <subquery> is not supported Spaces in file names are not supported. Use stdin for piping the data into q, or rename the file Some rare cases of subqueries are not supported yet. Queries with more than 10 different sqlite3 databases will load some data into memory up to 500 tables are supported in a single query Rationale \u00b6 Have you ever stared at a text file on the screen, hoping it would have been a database so you could ask anything you want about it? I had that feeling many times, and I've finally understood that it's not the database that I want. It's the language - SQL. SQL is a declarative language for data, and as such it allows me to define what I want without caring about how exactly it's done. This is the reason SQL is so powerful, because it treats data as data and not as bits and bytes (and chars). The goal of this tool is to provide a bridge between the world of text files and of SQL. Why aren't other Linux tools enough? \u00b6 The standard Linux tools are amazing and I use them all the time, but the whole idea of Linux is mixing-and-matching the best tools for each part of job. This tool adds the declarative power of SQL to the Linux toolset, without loosing any of the other tools' benefits. In fact, I often use q together with other Linux tools, the same way I pipe awk/sed and grep together all the time. One additional thing to note is that many Linux tools treat text as text and not as data. In that sense, you can look at q as a meta-tool which provides access to all the data-related tools that SQL provides (e.g. expressions, ordering, grouping, aggregation etc.). Philosophy \u00b6 This tool has been designed with general Linux/Unix design principles in mind. If you're interested in these general design principles, read this amazing book and specifically this part . If you believe that the way this tool works goes strongly against any of the principles, I would love to hear your view about it. Future \u00b6 Expose python as a python module - Planned as a goal after the new version 3.x is out","title":"Home"},{"location":"#q-run-sql-directly-on-csv-or-tsv-files","text":"","title":"q - Run SQL directly on CSV or TSV files"},{"location":"#overview","text":"q's purpose is to bring SQL expressive power to the Linux command line by providing easy access to text as actual data, and allowing direct access to multi-file sqlite3 databases. q <flags> <sql-query> q allows the following: Performing SQL-like statements directly on tabular text data, auto-caching the data in order to accelerate additional querying on the same file # Simple query from a file, columns are named c1...cN q \"select c1,c5 from myfile.csv\" # -d '|' sets the input delimiter, -H says there's a header q -d , -H \"select my_field from myfile.delimited-file-with-pipes\" # -C readwrite writes a cache for the csv file q -d , -H \"select my_field from myfile.csv\" -C readwrite # -C read tells q to use the cache q -d , -H \"select my_field from myfile.csv\" -C read # Setting the default caching mode (`-C`) can be done by writing a `~/.qrc` file Performing SQL statements directly on multi-file sqlite3 databases, without having to merge them or load them into memory q \"select * from mydatabase.sqlite:::my_table_name\" or q \"select * from mydatabase.sqlite\" if the database file contains only one table # sqlite files are autodetected, no need for any special filename extension The following table shows the impact of using caching: Rows Columns File Size Query time without caching Query time with caching Speed Improvement 5,000,000 100 4.8GB 4 minutes, 47 seconds 1.92 seconds x149 1,000,000 100 983MB 50.9 seconds 0.461 seconds x110 1,000,000 50 477MB 27.1 seconds 0.272 seconds x99 100,000 100 99MB 5.2 seconds 0.141 seconds x36 100,000 50 48MB 2.7 seconds 0.105 seconds x25 Notice that for the current version, caching is not enabled by default, since the caches take disk space. Use -C readwrite or -C read to enable it for a query, or add caching_mode to .qrc to set a new default. q treats ordinary files as database tables, and supports all SQL constructs, such as WHERE , GROUP BY , JOIN s, etc. It supports automatic column name and type detection, and provides full support for multiple character encodings. The new features - autocaching, direct querying of sqlite database and the use of ~/.qrc file are described in detail in here . Download the tool using the links in the installation below and play with it.","title":"Overview"},{"location":"#encodings","text":"\u5b8c\u5168\u652f\u6301\u6240\u6709\u7684\u5b57\u7b26\u7f16\u7801 \u3059\u3079\u3066\u306e\u6587\u5b57\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5b8c\u5168\u306b\u30b5\u30dd\u30fc\u30c8 \ubaa8\ub4e0 \ubb38\uc790 \uc778\ucf54\ub529\uc774 \uc644\ubcbd\ud558\uac8c \uc9c0\uc6d0\ub429\ub2c8\ub2e4 \u0432\u0441\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f Non-english users: q fully supports all types of encoding. Use -e data-encoding to set the input data encoding, -Q query-encoding to set the query encoding, and use -E output-encoding to set the output encoding. Sensible defaults are in place for all three parameters. Please contact me if you encounter any issues and I'd be glad to help. Files with BOM: Files which contain a BOM ( Byte Order Mark ) are not properly supported inside python's csv module. q contains a workaround that allows reading UTF8 files which contain a BOM - Use -e utf-8-sig for this. I plan to separate the BOM handling from the encoding itself, which would allow to support BOMs for all encodings.","title":"Encodings"},{"location":"#installation","text":"Format Instructions Comments OSX brew install will install the previous 2.0.19 for now, until homebrew approves the new version. In the mean time, you can download the new version executable from the link, chmod +x it and then run. You might need to run it the first time from Finder using Right-Click -> Open, and then click the Open button. After the first time, it will run from the command line without any issues. A man page is available, just run man q RPM Package run rpm -ivh <package-filename> or rpm -U <package-filename> if you already have an older version of q. A man page is available for this release. Just enter man q . DEB Package Run sudo dpkg -i <package-filename> A man page is available for this release. Just enter man q . Some installations don't install the man page properly for some reason. I'll fix this soon Windows Installer Run the installer executable and hit next next next... q.exe will be added to the PATH so you can access it everywhere. Windows doesn't update the PATH retroactively for open windows, so you'll need to open a new cmd / bash window after the installation is done. Source tar.gz Full source file tree for latest stable version. Note that q.py cannot be used directly anymore, as it requires python dependencies Source zip Full source file tree for the latest stable version. Note that q.py cannot be used directly anymore, as it requires python dependencies I will add packages for additional Linux Distributions if there's demand for it. If you're interested in another Linux distribution, please ping me. It's relatively easy to add new ones with the new packaging flow. The previous version 2.0.19 can be downloaded directly from here . Please let me know if for some reason the new version is not suitable for your needs, and you're planning on using the previous one.","title":"Installation"},{"location":"#requirements","text":"q is packaged as a compiled standalone-executable that has no dependencies, not even python itself. This was done by using the awesome pyoxidizer project.","title":"Requirements"},{"location":"#examples","text":"This section shows example flows that highlight the main features. For more basic examples, see here .","title":"Examples"},{"location":"#basic-examples","text":"# Prepare some data $ seq 1 1000000 > myfile.csv # Query it $ q \"select sum(c1),count(*) from myfile.csv where c1 % 3 = 0\" 166666833333 333333 # Use q to query from stdin $ ps -ef | q -b -H \"SELECT UID, COUNT(*) cnt FROM - GROUP BY UID ORDER BY cnt DESC LIMIT 3\" 501 288 0 115 270 17","title":"Basic Examples:"},{"location":"#auto-caching-examples","text":"# (time command output has been shortened for berevity) # Prepare some data $ seq 1 1000000 > myfile.csv # Read from the resulting file $ time q \"select sum(c1),count(*) from myfile.csv\" 500000500000 1000000 total_time=4.108 seconds # Running with `-C readwrite` auto-creates a cache file if there is none. The cache filename would be myfile.csv.qsql. The query runs as usual $ time q \"select sum(c1),count(*) from myfile.csv\" -C readwrite 500000500000 1000000 total_time=4.057 seconds # Now run with `-C read`. The query will run from the cache file and not the original. As the file gets bigger, the difference will be much more noticable $ time q \"select sum(c1),count(*) from myfile.csv\" -C read 500000500000 1000000 total_time=0.229 seconds # Now let's try another query on that file. Notice the short query duration. The cache is being used for any query that uses this file, and queries on multiple files that contain caches will reuse the cache as well. $ time q \"select avg(c1) from myfile.csv\" -C read 500000.5 total_time=0.217 seconds # You can also query the qsql file directly, as it's just a standard sqlite3 DB file (see next section for q's support of reading directly from sqlite DBs) $ time q \"select sum(c1),count(*) from myfile.csv.qsql\" 500000500000 1000000 total_time=0.226 seconds # Now let's delete the original csv file (be careful when deleting original data) $ rm -vf myfile.csv # Running another query directly on the qsql file just works $ time q \"select sum(c1),count(*) from myfile.csv.qsql\" 500000500000 1000000 total_time=0.226 seconds # See the `.qrc` section below if you want to set the default `-C` (`--caching-mode`) to something other than `none` (the default)","title":"Auto-caching Examples"},{"location":"#direct-sqlite-querying-examples","text":"# Download example sqlite3 database from https://www.sqlitetutorial.net/sqlite-sample-database/ and unzip it. The resulting file will be chinook.db $ curl -L https://www.sqlitetutorial.net/wp-content/uploads/2018/03/chinook.zip | tar -xvf - # Now we can query the database directly, specifying the name of the table in the query (<db_name>:::<table_name>) $ q \"select count(*) from chinook.db:::albums\" 347 # Let's take the top 5 longest tracks of album id 34. The -b option just beautifies the output, and -O tells q to output the column names as headers $ q \"select * from chinook.db:::tracks where albumid = '34' order by milliseconds desc limit 5\" -b -O TrackId Name AlbumId MediaTypeId GenreId Composer Milliseconds Bytes UnitPrice 407 \"S\u00f3 Tinha De Ser Com Voc\u00ea\" 34 1 7 V\u00e1rios 389642 13085596 0.99 398 \"Only A Dream In Rio\" 34 1 7 V\u00e1rios 371356 12192989 0.99 393 \"Tarde Em Itapo\u00e3\" 34 1 7 V\u00e1rios 313704 10344491 0.99 401 \"Momentos Que Marcam\" 34 1 7 V\u00e1rios 280137 9313740 0.99 391 \"Garota De Ipanema\" 34 1 7 V\u00e1rios 279536 9141343 0.99 # Let's now copy the chinook database to another file, as if it's just another different database $ cp chinook.db another_db.db # Now we can run a join query between the two databases. They could have been any two different databases, using the copy of chinook is just for simplicity # Let's get the top-5 longest albums, using albums from the first database and tracks from the second database. The track times are converted to seconds, and rounded to two digits after the decimal point. $ q -b -O \"select a.title,round(sum(t.milliseconds)/1000.0/60,2) total_album_time_seconds from chinook.db:::albums a left join another_database.db:::tracks t on (a.albumid = t.albumid) group by a.albumid order by total_album_time_seconds desc limit 5\" Title total_album_time_seconds \"Lost, Season 3\" 1177.76 \"Battlestar Galactica (Classic), Season 1\" 1170.23 \"Lost, Season 1\" 1080.92 \"Lost, Season 2\" 1054.83 \"Heroes, Season 1\" 996.34","title":"Direct sqlite Querying Examples"},{"location":"#analysis-examples","text":"# Let's create a simple CSV file without a header. Make sure to copy only the three lines, press enter, and # then press Ctrl-D to exit so the file will be written. $ cat > some-data-without-header.csv harel,1,2 ben,3,4 attia,5,6 <Ctrl-D> # Let's run q on it with -A, to see the detected structure of the file. `-d ,` sets the delimiter to a comma $ q -d , \"select * from some-data-without-header.csv\" -A Table: /Users/harelben-attia/dev/harelba/q/some-data-without-header.csv Sources: source_type: file source: /Users/harelben-attia/dev/harelba/q/some-data-without-header.csv Fields: `c1` - text `c2` - int `c3` - int # Now let's create another simple CSV file, this time with a header (-H tells q to expect a header in the file) $ cat > some-data.csv planet_id,name,diameter_km,length_of_day_hours 1000,Earth,12756,24 2000,Mars,6792,24.7 3000,Jupiter,142984,9.9 <Ctrl-D> # Let's run q with -A to see the analysis results. $ q -b -O -H -d , \"select * from some-data.csv\" -A Table: /Users/harelben-attia/dev/harelba/q/some-data.csv Sources: source_type: file source: /Users/harelben-attia/dev/harelba/q/some-data.csv Fields: `planet_id` - int `name` - text `diameter_km` - int `length_of_day_hours` - real # Let's run it with `-C readwrite` so a cache will be created $ q -b -O -H -d , \"select * from some-data.csv\" -C readwrite planet_id,name ,diameter_km,length_of_day_hours 1000 ,Earth ,12756 ,24.0 2000 ,Mars ,6792 ,24.7 3000 ,Jupiter,142984 ,9.9 # Running another query that uses some-data.csv with -A will now show that a qsql exists for that file. The source-type # will be \"file-with-unused-qsql\". The qsql cache is not being used, since by default, q does not activate caching # so backward compatibility is maintained $ q -b -O -H -d , \"select * from some-data.csv\" -A Table: /Users/harelben-attia/dev/harelba/q/some-data.csv Sources: source_type: file-with-unused-qsql source: /Users/harelben-attia/dev/harelba/q/some-data.csv Fields: `planet_id` - int `name` - text `diameter_km` - int `length_of_day_hours` - real # Now let's run another query, this time with `-C read`, telling q to use the qsql caches. This time source-type will # be \"qsql-file-with-original\", and the cache will be used when querying: $ q -b -O -H -d , \"select * from some-data.csv\" -A -C read Table: /Users/harelben-attia/dev/harelba/q/some-data.csv Sources: source_type: qsql-file-with-original source: /Users/harelben-attia/dev/harelba/q/some-data.csv.qsql Fields: `planet_id` - int `name` - text `diameter_km` - int `length_of_day_hours` - real # Let's now read directly from the qsql file. Notice the change in the table name inside the query. `-C read` is not needed # here. The source-type will be \"qsql-file\" $ q -b -O -H -d , \"select * from some-data.csv.qsql\" -A Table: /Users/harelben-attia/dev/harelba/q/some-data.csv.qsql Sources: source_type: qsql-file source: /Users/harelben-attia/dev/harelba/q/some-data.csv.qsql Fields: `planet_id` - int `name` - text `diameter_km` - int `length_of_day_hours` - real","title":"Analysis Examples"},{"location":"#usage","text":"Query should be an SQL-like query which contains filenames instead of table names (or - for stdin). The query itself should be provided as one parameter to the tool (i.e. enclosed in quotes). All sqlite3 SQL constructs are supported, including joins across files (use an alias for each table). Take a look at the limitations section below for some rarely-used use cases which are not fully supported. q gets a full SQL query as a parameter. Remember to double-quote the query. Historically, q supports multiple queries on the same command-line, loading each data file only once, even if it is used by multiple queries on the same q invocation. This is still supported. However, due to the new automatic-caching capabilities, this is not really required. Activate caching, and a cache file will be automatically created for each file. q Will use the cache behind the scenes in order to speed up queries. The speed up is extremely significant, so consider using caching for large files. The following filename types are supported: Delimited-file filenames - including relative/absolute paths. E.g. ./my_folder/my_file.csv or /var/tmp/my_file.csv sqlite3 database filenames With Multiple Tables - Add an additional :::<table_name> for accessing a specific table. For example mydatabase.sqlite3:::users_table . With One Table Only - Just specify the database filename, no need for a table name postfix. For example my_single_table_database.sqlite . .qsql cache files - q can auto-generate cache files for delimited files, and they can be queried directly as a table, since they contain only one table, as they are essentially standard sqlite datbases Use -H to signify that the input contains a header line. Column names will be detected automatically in that case, and can be used in the query. If this option is not provided, columns will be named cX, starting with 1 (e.g. q \"SELECT c3,c8 from ...\" ). Use -d to specify the input delimiter. Column types are auto detected by the tool, no casting is needed. Note that there's a flag --as-text which forces all columns to be treated as text columns. Please note that column names that include spaces need to be used in the query with back-ticks, as per the sqlite standard. Make sure to use single-quotes around the query, so bash/zsh won't interpret the backticks. Query/Input/Output encodings are fully supported (and q tries to provide out-of-the-box usability in that area). Please use -e , -E and -Q to control encoding if needed. JOINs are supported and Subqueries are supported in the WHERE clause, but unfortunately not in the FROM clause for now. Use table aliases when performing JOINs. The SQL syntax itself is sqlite's syntax. For details look at http://www.sqlite.org/lang.html or search the net for examples. NOTE: When using the -O output header option, use column name aliases if you want to control the output column names. For example, q -O -H \"select count(*) cnt,sum(*) as mysum from -\" would output cnt and mysum as the output header column names. Options: -h, --help show this help message and exit -v, --version Print version -V, --verbose Print debug info in case of problems -S SAVE_DB_TO_DISK_FILENAME, --save-db-to-disk=SAVE_DB_TO_DISK_FILENAME Save database to an sqlite database file -C CACHING_MODE, --caching-mode=CACHING_MODE Choose the autocaching mode (none/read/readwrite). Autocaches files to disk db so further queries will be faster. Caching is done to a side-file with the same name of the table, but with an added extension .qsql --dump-defaults Dump all default values for parameters and exit. Can be used in order to make sure .qrc file content is being read properly. --max-attached-sqlite-databases=MAX_ATTACHED_SQLITE_DATABASES Set the maximum number of concurrently-attached sqlite dbs. This is a compile time definition of sqlite. q's performance will slow down once this limit is reached for a query, since it will perform table copies in order to avoid that limit. --overwrite-qsql=OVERWRITE_QSQL When used, qsql files (both caches and store-to-db) will be overwritten if they already exist. Use with care. Input Data Options: -H, --skip-header Skip header row. This has been changed from earlier version - Only one header row is supported, and the header row is used for column naming -d DELIMITER, --delimiter=DELIMITER Field delimiter. If none specified, then space is used as the delimiter. -p, --pipe-delimited Same as -d '|'. Added for convenience and readability -t, --tab-delimited Same as -d <tab>. Just a shorthand for handling standard tab delimited file You can use $'\\t' if you want (this is how Linux expects to provide tabs in the command line -e ENCODING, --encoding=ENCODING Input file encoding. Defaults to UTF-8. set to none for not setting any encoding - faster, but at your own risk... -z, --gzipped Data is gzipped. Useful for reading from stdin. For files, .gz means automatic gunzipping -A, --analyze-only Analyze sample input and provide information about data types -m MODE, --mode=MODE Data parsing mode. fluffy, relaxed and strict. In strict mode, the -c column-count parameter must be supplied as well -c COLUMN_COUNT, --column-count=COLUMN_COUNT Specific column count when using relaxed or strict mode -k, --keep-leading-whitespace Keep leading whitespace in values. Default behavior strips leading whitespace off values, in order to provide out-of-the-box usability for simple use cases. If you need to preserve whitespace, use this flag. --disable-double-double-quoting Disable support for double double-quoting for escaping the double quote character. By default, you can use \"\" inside double quoted fields to escape double quotes. Mainly for backward compatibility. --disable-escaped-double-quoting Disable support for escaped double-quoting for escaping the double quote character. By default, you can use \\\" inside double quoted fields to escape double quotes. Mainly for backward compatibility. --as-text Don't detect column types - All columns will be treated as text columns -w INPUT_QUOTING_MODE, --input-quoting-mode=INPUT_QUOTING_MODE Input quoting mode. Possible values are all, minimal and none. Note the slightly misleading parameter name, and see the matching -W parameter for output quoting. -M MAX_COLUMN_LENGTH_LIMIT, --max-column-length-limit=MAX_COLUMN_LENGTH_LIMIT Sets the maximum column length. -U, --with-universal-newlines Expect universal newlines in the data. Limitation: -U works only with regular files for now, stdin or .gz files are not supported yet. Output Options: -D OUTPUT_DELIMITER, --output-delimiter=OUTPUT_DELIMITER Field delimiter for output. If none specified, then the -d delimiter is used if present, or space if no delimiter is specified -P, --pipe-delimited-output Same as -D '|'. Added for convenience and readability. -T, --tab-delimited-output Same as -D <tab>. Just a shorthand for outputting tab delimited output. You can use -D $'\\t' if you want. -O, --output-header Output header line. Output column-names are determined from the query itself. Use column aliases in order to set your column names in the query. For example, 'select name FirstName,value1/value2 MyCalculation from ...'. This can be used even if there was no header in the input. -b, --beautify Beautify output according to actual values. Might be slow... -f FORMATTING, --formatting=FORMATTING Output-level formatting, in the format X=fmt,Y=fmt etc, where X,Y are output column numbers (e.g. 1 for first SELECT column etc. -E OUTPUT_ENCODING, --output-encoding=OUTPUT_ENCODING Output encoding. Defaults to 'none', leading to selecting the system/terminal encoding -W OUTPUT_QUOTING_MODE, --output-quoting-mode=OUTPUT_QUOTING_MODE Output quoting mode. Possible values are all, minimal, nonnumeric and none. Note the slightly misleading parameter name, and see the matching -w parameter for input quoting. -L, --list-user-functions List all user functions Query Related Options: -q QUERY_FILENAME, --query-filename=QUERY_FILENAME Read query from the provided filename instead of the command line, possibly using the provided query encoding (using -Q). -Q QUERY_ENCODING, --query-encoding=QUERY_ENCODING query text encoding. Experimental. Please send your feedback on this","title":"Usage"},{"location":"#setting-the-default-values-for-parameters","text":"It's possible to set default values for parameters which are used often by configuring them in the file ~/.qrc . The file format is as follows: [options] <setting>=<default-value> It's possible to generate a default .qrc file by running q --dump-defaults and write the output into the .qrc file. One valuable use-case for this could be setting the caching-mode to read . This will make q automatically use generated .qsql cache files if they exist. Whenever you want a cache file to be generated, just use -C readwrite and a .qsql file will be generated if it doesn't exist. Here's the content of the ~/.qrc file for enabling cache reads by default: [options] caching_mode=read","title":"Setting the default values for parameters"},{"location":"#getting-started-examples","text":"This section shows some more basic examples of simple SQL constructs. For some more complex use-cases, see the examples at the beginning of the documentation. NOTES: The -H flag in the examples below signifies that the file has a header row which is used for naming columns. The -t flag is just a shortcut for saying that the file is a tab-separated file (any delimiter is supported - Use the -d flag). Queries are given using upper case for clarity, but actual query keywords such as SELECT and WHERE are not really case sensitive. Basic Example List: Example 1 - COUNT DISTINCT values of specific field (uuid of clicks data) Example 2 - Filter numeric data, controlling ORDERing and LIMITing output Example 3 - Illustrate GROUP BY Example 4 - More complex GROUP BY (group by time expression) Example 5 - Read input from standard input Example 6 - Use column names from header row Example 7 - JOIN two files","title":"Getting Started Examples"},{"location":"#example-1","text":"Perform a COUNT DISTINCT values of specific field (uuid of clicks data). q -H -t \"SELECT COUNT(DISTINCT(uuid)) FROM ./clicks.csv\" Output 229","title":"Example 1"},{"location":"#example-2","text":"Filter numeric data, controlling ORDERing and LIMITing output Note that q understands that the column is numeric and filters according to its numeric value (real numeric value comparison, not string comparison). q -H -t \"SELECT request_id,score FROM ./clicks.csv WHERE score > 0.7 ORDER BY score DESC LIMIT 5\" Output: 2cfab5ceca922a1a2179dc4687a3b26e 1.0 f6de737b5aa2c46a3db3208413a54d64 0.986665809568 766025d25479b95a224bd614141feee5 0.977105183282 2c09058a1b82c6dbcf9dc463e73eddd2 0.703255121794","title":"Example 2"},{"location":"#example-3","text":"Illustrate GROUP BY q -t -H \"SELECT hashed_source_machine,count(*) FROM ./clicks.csv GROUP BY hashed_source_machine\" Output: 47d9087db433b9ba.domain.com 400000","title":"Example 3"},{"location":"#example-4","text":"More complex GROUP BY (group by time expression) q -t -H \"SELECT strftime('%H:%M',date_time) hour_and_minute,count(*) FROM ./clicks.csv GROUP BY hour_and_minute\" Output: 07:00 138148 07:01 140026 07:02 121826","title":"Example 4"},{"location":"#example-5","text":"Read input from standard input Calculates the total size per user/group in the /tmp subtree. sudo find /tmp -ls | q \"SELECT c5,c6,sum(c7)/1024.0/1024 AS total FROM - GROUP BY c5,c6 ORDER BY total desc\" Output: mapred hadoop 304.00390625 root root 8.0431451797485 smith smith 4.34389972687","title":"Example 5"},{"location":"#example-6","text":"Use column names from header row Calculate the top 3 user ids with the largest number of owned processes, sorted in descending order. Note the usage of the autodetected column name UID in the query. ps -ef | q -H \"SELECT UID,COUNT(*) cnt FROM - GROUP BY UID ORDER BY cnt DESC LIMIT 3\" Output: root 152 harel 119 avahi 2","title":"Example 6"},{"location":"#example-7","text":"JOIN two files The following command joins an ls output (exampledatafile) and a file containing rows of group-name,email (group-emails-example) and provides a row of filename,email for each of the emails of the group. For brevity of output, there is also a filter for a specific filename called ppp which is achieved using a WHERE clause. q \"SELECT myfiles.c8,emails.c2 FROM exampledatafile myfiles JOIN group-emails-example emails ON (myfiles.c4 = emails.c1) WHERE myfiles.c8 = 'ppp'\" Output: ppp dip.1@otherdomain.com ppp dip.2@otherdomain.com You can see that the ppp filename appears twice, each time matched to one of the emails of the group dip to which it belongs. Take a look at the files exampledatafile and group-emails-example for the data. Column name detection is supported for JOIN scenarios as well. Just specify -H in the command line and make sure that the source files contain the header rows.","title":"Example 7"},{"location":"#implementation","text":"Behind the scenes q creates a \"virtual\" sqlite3 database that does not contain data of its own, but attaches to multiple other databases as follows: When reading delimited files or data from stdin , it will analyze the data and construct an in-memory \"adhoc database\" that contains it. This adhoc database will be attached to the virtual database When a delimited file has a .qsql cache, it will attach to that file directly, without having to read it into memory When querying a standard sqlite3 file, it will be attached to the virtual database to it as well, without reading it into memory. sqlite3 files are auto-detected, no need for any special filename extension The user query will be executed directly on the virtual database, using the attached databases. sqlite3 itself has a limit on the number of attached databases (usually 10). If that limit is reached, q will automatically attach databases until that limit is reached, and will load additional tables into the adhoc database's in-memory database. Please make sure to read the limitations section as well.","title":"Implementation"},{"location":"#development","text":"","title":"Development"},{"location":"#tests","text":"The code includes a test suite runnable through run-tests.sh . By default, it uses the python source code for running the tests. However, it is possible to provide a path to an actual executable to the tests using the Q_EXECUTABLE env var. This is actually being used during the build and packaging process, in order to test the resulting binary.","title":"Tests"},{"location":"#limitations","text":"Here's the list of known limitations. Please contact me if you have a use case that needs any of those missing capabilities. Common Table Expressions (CTE) are not supported for now. Will be implemented soon - See here and here for details. FROM <subquery> is not supported Spaces in file names are not supported. Use stdin for piping the data into q, or rename the file Some rare cases of subqueries are not supported yet. Queries with more than 10 different sqlite3 databases will load some data into memory up to 500 tables are supported in a single query","title":"Limitations"},{"location":"#rationale","text":"Have you ever stared at a text file on the screen, hoping it would have been a database so you could ask anything you want about it? I had that feeling many times, and I've finally understood that it's not the database that I want. It's the language - SQL. SQL is a declarative language for data, and as such it allows me to define what I want without caring about how exactly it's done. This is the reason SQL is so powerful, because it treats data as data and not as bits and bytes (and chars). The goal of this tool is to provide a bridge between the world of text files and of SQL.","title":"Rationale"},{"location":"#why-arent-other-linux-tools-enough","text":"The standard Linux tools are amazing and I use them all the time, but the whole idea of Linux is mixing-and-matching the best tools for each part of job. This tool adds the declarative power of SQL to the Linux toolset, without loosing any of the other tools' benefits. In fact, I often use q together with other Linux tools, the same way I pipe awk/sed and grep together all the time. One additional thing to note is that many Linux tools treat text as text and not as data. In that sense, you can look at q as a meta-tool which provides access to all the data-related tools that SQL provides (e.g. expressions, ordering, grouping, aggregation etc.).","title":"Why aren't other Linux tools enough?"},{"location":"#philosophy","text":"This tool has been designed with general Linux/Unix design principles in mind. If you're interested in these general design principles, read this amazing book and specifically this part . If you believe that the way this tool works goes strongly against any of the principles, I would love to hear your view about it.","title":"Philosophy"},{"location":"#future","text":"Expose python as a python module - Planned as a goal after the new version 3.x is out","title":"Future"},{"location":"about/","text":"About \u00b6 Linkedin: Harel Ben Attia \u00b6 Twitter @harelba \u00b6 Email harelba@gmail.com \u00b6 Patreon harelba \u00b6 All the money received is donated to the Center for the Prevention and Treatment of Domestic Violence in my hometown - Ramla, Israel. Become a Patron! Chinese translation jinzhencheng@outlook.com \u00b6","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#linkedin-harel-ben-attia","text":"","title":"Linkedin: Harel Ben Attia"},{"location":"about/#twitter-harelba","text":"","title":"Twitter @harelba"},{"location":"about/#email-harelbagmailcom","text":"","title":"Email harelba@gmail.com"},{"location":"about/#patreon-harelba","text":"All the money received is donated to the Center for the Prevention and Treatment of Domestic Violence in my hometown - Ramla, Israel. Become a Patron!","title":"Patreon harelba"},{"location":"about/#chinese-translation-jinzhenchengoutlookcom","text":"","title":"Chinese translation jinzhencheng@outlook.com"},{"location":"index_cn/","text":"q - \u76f4\u63a5\u5728CSV\u6216TSV\u6587\u4ef6\u4e0a\u8fd0\u884cSQL \u00b6 \u6982\u8ff0 \u00b6 q \u662f\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u884c\u5728 CSV / TSV \u6587\u4ef6(\u6216\u5176\u4ed6\u8868\u683c\u5f0f\u7684\u6587\u672c\u6587\u4ef6)\u4e0a\u8fd0\u884c\u7c7bSQL\u547d\u4ee4\u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002 q \u5c06\u666e\u901a\u6587\u672c\uff08\u5982\u4e0a\u8ff0\uff09\u4f5c\u4e3a\u6570\u636e\u5e93\u8868\uff0c\u4e14\u652f\u6301\u6240\u6709\u7684SQL\u8bed\u6cd5\u5982\uff1aWHERE\u3001GROUP BY\u3001\u5404\u79cdJOIN\u7b49\u3002\u6b64\u5916\uff0c\u8fd8\u62e5\u6709\u81ea\u52a8\u8bc6\u522b\u5217\u540d\u548c\u5217\u7c7b\u578b\u53ca\u5e7f\u6cdb\u652f\u6301\u591a\u79cd\u7f16\u7801\u7684\u7279\u6027\u3002 q \"SELECT COUNT(*) FROM ./clicks_file.csv WHERE c3 > 32.3\" ps -ef | q -H \"SELECT UID,COUNT(*) cnt FROM - GROUP BY UID ORDER BY cnt DESC LIMIT 3\" \u67e5\u770b \u793a\u4f8b \u6216 \u5b89\u88c5 \u4f53\u9a8c. \u5b8c\u5168\u652f\u6301\u6240\u6709\u7684\u5b57\u7b26\u7f16\u7801 \u3059\u3079\u3066\u306e\u6587\u5b57\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5b8c\u5168\u306b\u30b5\u30dd\u30fc\u30c8 \ubaa8\ub4e0 \ubb38\uc790 \uc778\ucf54\ub529\uc774 \uc644\ubcbd\ud558\uac8c \uc9c0\uc6d0\ub429\ub2c8\ub2e4 \u0432\u0441\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u975e\u82f1\u8bed\u7528\u6237: q \u5b8c\u5168\u652f\u6301\u6240\u6709\u7c7b\u578b\u7684\u5b57\u7b26\u7f16\u7801\u3002 \u4f7f\u7528 -e data-encoding \u8bbe\u7f6e\u8f93\u5165\u7f16\u7801; \u4f7f\u7528 -Q query-encoding \u8bbe\u7f6e\u67e5\u8be2\u7f16\u7801; \u4f7f\u7528 -E output-encoding \u8bbe\u7f6e\u8f93\u51fa\u7f16\u7801; \u5982\u4e0a\u4e09\u4e2a\u53c2\u6570\u5747\u8bbe\u6709\u5408\u7406\u7684\u9ed8\u8ba4\u503c\u3002 \u5982\u679c\u9047\u5230\u95ee\u9898\u8bf7\u4e0e\u6211\u8054\u7cfb\uff0c\u671f\u5f85\u4e0e\u4f60\u4ea4\u6d41\u3002 \u542b\u6709BOM\u7684\u6587\u4ef6: python\u7684csv\u6a21\u5757\u5e76\u4e0d\u80fd\u5f88\u597d\u7684\u652f\u6301\u542b\u6709 Byte Order Mark \u7684\u6587\u4ef6\u3002\u9488\u5bf9\u8be5\u79cd\u60c5\u51b5\uff0c\u4f7f\u7528 -e utf-8-sig \u547d\u4ee4\u53c2\u6570\u53ef\u8bfb\u53d6\u5305\u542bBOM\u7684UTF8\u7f16\u7801\u6587\u4ef6\u3002 \u6211\u4eec\u8ba1\u5212\u5c06BOM\u76f8\u5173\u5904\u7406\u4e0e\u7f16\u7801'\u89e3\u8026', \u8fd9\u6837\u5c31\u53ef\u4ee5\u652f\u6301\u6240\u6709\u7f16\u7801\u7684BOM\u6587\u4ef6\u4e86\u3002 \u5b89\u88c5 \u00b6 \u683c\u5f0f \u8bf4\u660e \u5907\u6ce8 OSX \u8fd0\u884c brew install q \u8be5\u65b9\u5f0f\u6682\u4e0d\u652f\u6301MAN\u624b\u518c, \u53ef\u4ee5\u4f7f\u7528 q --help \u67e5\u770b\u5e2e\u52a9 RPM Package \u8fd0\u884c rpm -ivh <package-filename> \u5982\u679c\u5b89\u88c5\u8fc7\u65e7\u7248\u5219\u8fd0\u884c rpm -U <package-filename> \u8be5\u65b9\u5f0f\u652f\u6301MAN\u624b\u518c\uff0c\u53ef\u8fd0\u884c man q \u67e5\u770b DEB Package \u8fd0\u884c sudo dpkg -i <package-filename> \u8be5\u65b9\u5f0f\u652f\u6301MAN\u624b\u518c\uff0c\u53ef\u8fd0\u884c man q \u67e5\u770b Windows Installer \u8fd0\u884c\u5b89\u88c5\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4e00\u76f4\u70b9\u51fb\u4e0b\u4e00\u6b65\u3001\u4e0b\u4e00\u6b65... q.exe \u5c06\u88ab\u6dfb\u52a0\u81f3PATH\uff0c\u4ee5\u4fbf\u4e8e\u968f\u5904\u8fd0\u884c PATH\u66f4\u65b0\u540e\u5e76\u4e0d\u4f1a\u5373\u65f6\u751f\u6548\uff0c\u91cd\u65b0\u6253\u5f00cmd\u547d\u4ee4\u7a97\u53e3\u4fbf\u53ef tar.gz \u6700\u65b0\u7a33\u5b9a\u7248\u7684\u6240\u6709\u6e90\u7801\u6587\u4ef6\u3002\u63d0\u793a\uff0cq.py \u6587\u4ef6\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u9700\u8981python\u4f9d\u8d56 zip \u6700\u65b0\u7a33\u5b9a\u7248\u7684\u6240\u6709\u6e90\u7801\u6587\u4ef6\u3002\u63d0\u793a\uff0cq.py \u6587\u4ef6\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u9700\u8981python\u4f9d\u8d56 \u65e7\u7248\u672c\u53ef\u4ee5\u5728\u8fd9\u513f \u4e0b\u8f7d \u3002\u6309\u7406\u8bf4\u4e0d\u4f1a\u6709\u4eba\u613f\u610f\u7528\u65e7\u7248\u672c\uff0c\u8981\u662f\u4f60\u8ba1\u5212\u4f7f\u7528\u65e7\u7248\uff0c\u5e0c\u671b\u80fd\u4e0e\u4f60\u4ea4\u6d41\u3002 \u987b\u77e5 \u00b6 \u4ece 2.0.9 \u7248\u672c\u5f00\u59cb\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u5916\u90e8\u4f9d\u8d56\u3002Python(3.7)\u548c\u5176\u4ed6\u6240\u9700\u7684\u5e93\u5305\u542b\u5728\u4e86\u5b89\u88c5\u6587\u4ef6\u4e2d\u4e14\u4e0e\u7cfb\u7edf\u9694\u79bb\u3002 \u4f7f\u7528 \u00b6 q <flags> \"<query>\" \u6700\u7b80\u5355\u7684\u6267\u884c\u8bed\u53e5\uff1aq \"SELECT * FROM myfile\" \u8be5\u8bed\u53e5\u4f1a\u8f93\u51fa\u6587\u4ef6\u5185\u5bb9 q \u652f\u6301\u5728\u8868\u683c\u5f0f\u7684\u6587\u672c\u4e0a\u6267\u884c\u7c7bSQL\u547d\u4ee4\u3002\u5b83\u7684\u521d\u8877\u662f\u4e3aLinux\u547d\u4ee4\u884c\u9644\u52a0SQL\u7684\u8868\u8fbe\u529b\u4e14\u5b9e\u73b0\u5bf9\u6587\u672c\u6570\u636e\u7684\u8f7b\u677e\u8bbf\u95ee\u3002 \u7c7bSQL\u7684\u67e5\u8be2\u5c06 \u6587\u4ef6\u540d(\u6216\u6807\u51c6\u8f93\u5165\u6d41)\u770b\u4f5c\u8868\u540d \u3002\u67e5\u8be2\u8bed\u53e5\u4f1a\u4f5c\u4e3a\u547d\u4ee4\u8f93\u5165\u7684\u4e00\u4e2a\u53c2\u6570\uff08\u4f7f\u7528\u5f15\u53f7\u5305\u88f9)\uff0c\u5982\u679c\u5c06\u591a\u4e2a\u6587\u4ef6\u770b\u4f5c\u4e00\u5f20\u8868\uff0c\u53ef\u4ee5\u8fd9\u6837\u5199 \u6587\u4ef6\u540d1+\u6587\u4ef6\u540d2.... \u6216\u8005\u4f7f\u7528\u901a\u914d\u7b26\uff08\u6bd4\u5982\uff1a my_files*.csv )\u3002 \u4f7f\u7528 -H \u8868\u793a\u8f93\u5165\u5185\u5bb9\u4e2d\u5305\u542b\u8868\u5934\u3002\u8be5\u60c5\u51b5\u4e0b\u5217\u540d\u4f1a\u88ab\u81ea\u52a8\u8bc6\u522b\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u8be5\u53c2\u6570\uff0c\u5217\u540d\u5c06\u4f1a\u88ab\u4ee5 cX \u547d\u540d\uff0c X \u4ece1\u5f00\u59cb\uff08\u6bd4\u5982: q \"SELECT c3,c8 from ...\" ) \u3002 \u4f7f\u7528 -d \u58f0\u660e\u8f93\u5165\u7684\u5206\u9694\u7b26\u3002 \u5217\u7c7b\u578b\u53ef\u7531\u5de5\u5177\u81ea\u52a8\u8bc6\u522b\uff0c\u65e0\u9700\u5f3a\u5236\u8f6c\u6362\u3002 \u63d0\u793a\uff0c\u4f7f\u7528 --as-text \u53ef\u4ee5\u5f3a\u5236\u5c06\u6240\u6709\u5217\u7c7b\u578b\u8f6c\u6362\u4e3a\u6587\u672c\u7c7b\u578b\u3002 \u4f9d\u636esqlite\u89c4\u8303\uff0c\u5982\u679c\u5217\u540d\u4e2d\u542b\u6709\u7a7a\u683c\uff0c\u9700\u8981\u4f7f\u7528\u53cd\u5f15\u53f7 (\u5373\uff1a`) \u5f15\u8d77\u6765\u3002 \u5b8c\u5168\u652f\u6301\u67e5\u8be2/\u8f93\u5165/\u8f93\u51fa\u7684\u7f16\u7801\u8bbe\u7f6e\uff08q \u529b\u4e89\u63d0\u4f9b\u4e00\u79cd\u5f00\u7bb1\u5373\u7528\u7684\u65b9\u6cd5), \u53ef\u4ee5\u5206\u522b\u4f7f\u7528 -Q , -e \u548c -E \u6765\u6307\u5b9a\u7f16\u7801\u8bbe\u7f6e\u7c7b\u578b\u3002 \u652f\u6301\u6240\u6709\u7684sqlite3 SQL\u65b9\u6cd5\uff0c\u5305\u62ec\u6587\u4ef6\u4e4b\u95f4\u7684 JOIN\uff08\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8bbe\u7f6e\u522b\u540d\uff09\u64cd\u4f5c\u3002\u5728\u4e0b\u9762\u7684 \u9650\u5236 \u5c0f\u8282\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u5c11\u6709\u4f7f\u7528\u7684\u3001\u6b20\u652f\u6301\u7684\u8bf4\u660e\u3002 \u67e5\u8be2 \u00b6 q \u7684\u6bcf\u4e00\u4e2a\u53c2\u6570\u90fd\u662f\u7531\u53cc\u5f15\u53f7\u5305\u88f9\u7684\u4e00\u6761\u5b8c\u6574\u7684SQL\u8bed\u53e5\u3002\u6240\u6709\u7684\u67e5\u8be2\u8bed\u53e5\u4f1a\u4f9d\u6b21\u6267\u884c\uff0c\u6700\u7ec8\u7ed3\u679c\u4ee5\u6807\u51c6\u8f93\u51fa\u6d41\u5f62\u5f0f\u8f93\u51fa\u3002 \u63d0\u793a\uff0c\u5728\u540c\u4e00\u547d\u4ee4\u884c\u4e2d\u6267\u884c\u591a\u6761\u67e5\u8be2\u8bed\u53e5\u65f6\uff0c\u4ec5\u5728\u6267\u884c\u7b2c\u4e00\u6761\u67e5\u8be2\u8bed\u53e5\u65f6\u9700\u8981\u8017\u65f6\u8f7d\u5165\u6570\u636e\uff0c\u5176\u4ed6\u67e5\u8be2\u8bed\u53e5\u5373\u65f6\u6267\u884c\u3002 \u652f\u6301\u6240\u6709\u6807\u51c6SQL\u8bed\u6cd5\uff0c\u6761\u4ef6\uff08WHERE \u548c HAVING\uff09\u3001GROUP BY\u3001ORDER BY\u7b49\u3002 \u5728WHERE\u6761\u4ef6\u67e5\u8be2\u4e2d\uff0c\u652f\u6301JOIN\u64cd\u4f5c\u548c\u5b50\u67e5\u8be2\uff0c\u4f46\u5728FROM\u5b50\u53e5\u4e2d\u5e76\u4e0d\u652f\u6301\u3002JOIN\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8d77\u522b\u540d\u3002 SQL\u8bed\u6cd5\u540csqlite\u7684\u8bed\u6cd5\uff0c\u8be6\u60c5\u89c1 http://www.sqlite.org/lang.html \u6216\u4e0a\u7f51\u627e\u4e00\u4e9b\u793a\u4f8b\u3002 \u6ce8\u610f \uff1a \u652f\u6301\u6240\u6709\u7c7b\u578b\u7684\u81ea\u52a8\u8bc6\u522b\uff0c\u65e0\u9700\u5f3a\u5236\u8f6c\u6362\u6216\u5176\u4ed6\u64cd\u4f5c\u3002 \u5982\u679c\u91cd\u547d\u540d\u8f93\u51fa\u5217\uff0c\u5219\u9700\u8981\u4e3a\u5217\u6307\u5b9a\u522b\u540d\u5e76\u4f7f\u7528 -O \u58f0\u660e\u3002\u5982: q -O -H \"select count(*) cnt,sum(*) as mysum from -\" \u4fbf\u4f1a\u5c06 cnt \u548c mysum \u4f5c\u4e3a\u5217\u540d\u8f93\u51fa\u3002 \u6307\u4ee4 \u00b6 \u4f7f\u7528: q \u652f\u6301\u5728\u8868\u683c\u5f0f\u7684\u6587\u672c\u6570\u636e\u4e0a\u6267\u884c\u7c7bSQL\u67e5\u8be2\u3002 \u5b83\u7684\u521d\u8877\u662f\u4e3aLinux\u547d\u4ee4\u884c\u9644\u52a0SQL\u7684\u8868\u8fbe\u529b\u4e14\u5b9e\u73b0\u5bf9\u6587\u672c\u6570\u636e\u7684\u8f7b\u677e\u8bbf\u95ee\u3002 \u57fa\u672c\u64cd\u4f5c\u662f q \"SQL\u67e5\u8be2\u8bed\u53e5\" \u8868\u540d\u4fbf\u662f\u6587\u4ef6\u540d\uff08\u4f7f\u7528 - \u4ece\u6807\u6ce8\u8f93\u5165\u4e2d\u8bfb\u53d6\u6570\u636e\uff09\u3002\u82e5\u8f93\u5165\u5185\u5bb9\u5305\u542b\u8868\u5934\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 -H \u6307\u5b9a\u5217\u540d\u3002\u82e5\u65e0\u8868\u5934\uff0c\u5219\u5217\u5c06\u4f1a\u81ea\u52a8\u547d\u540d\u4e3a c1...cN\u3002 \u5217\u7c7b\u578b\u53ef\u88ab\u81ea\u52a8\u8bc6\u522b\u3002\u53ef\u4ee5\u4f7f\u7528 -A \u547d\u4ee4\u67e5\u770b\u6bcf\u5217\u7684\u540d\u79f0\u53ca\u5176\u7c7b\u578b\u3002 \u53ef\u4ee5\u4f7f\u7528 -d (\u6216 -t) \u6307\u5b9a\u5206\u9694\u7b26\uff0c\u4f7f\u7528 -D \u6307\u5b9a\u8f93\u51fa\u5206\u5272\u7b26\u3002 \u652f\u6301\u6240\u6709\u7684sqlite3 SQL\u65b9\u6cd5\u3002 \u793a\u4f8b: \u4f8b\u5b501: ls -ltrd * | q \"select c1,count(1) from - group by c1\" \u4e0a\u4f8b\u5c06\u4f1a\u8f93\u51fa\u5f53\u524d\u76ee\u5f55\u4e0b\uff0c\u6240\u6709\u6587\u4ef6\u7684\u6743\u9650\u8868\u8fbe\u5f0f\u5206\u7ec4\u53ca\u6bcf\u7ec4\u6570\u91cf\u3002 \u4f8b\u5b502: seq 1 1000 | q \"select avg(c1),sum(c1) from -\" \u4e0a\u4f8b\u5c06\u4f1a\u8f93\u51fa1\u52301000\u7684\u5e73\u5747\u6570\u4e0e\u548c\u6570\u3002 \u4f8b\u5b503: sudo find /tmp -ls | q \"select c5,c6,sum(c7)/1024.0/1024 as total from - group by c5,c6 order by total desc\" \u4e0a\u4f8b\u5c06\u4f1a\u8f93\u51fa\u5728/tmp\u76ee\u5f55\u4e0b\uff0c\u76f8\u540c'\u7528\u6237+\u7ec4'\u7684\u6587\u4ef6\u6240\u5360\u7528\u7684MB\u78c1\u76d8\u7a7a\u95f4\u3002 \u66f4\u591a\u8be6\u60c5\u89c1 https://github.com/harelba/q/ \u6216\u67e5\u770b\u5e2e\u52a9 \u9009\u9879\uff1a -h, --help \u663e\u793a\u6b64\u5e2e\u52a9\u4fe1\u606f\u5e76\u9000\u51fa -v, --version \u663e\u793a\u7248\u672c\u53f7 -V, --verbose \u51fa\u73b0\u95ee\u9898\u65f6\u663e\u793a\u8c03\u8bd5\u4fe1\u606f -S SAVE_DB_TO_DISK_FILENAME, --save-db-to-disk=SAVE_DB_TO_DISK_FILENAME \u5c06\u6570\u636e\u5e93\u4fdd\u5b58\u4e3a\u4e00\u4e2a sqlite \u6570\u636e\u5e93\u6587\u4ef6 --save-db-to-disk-method=SAVE_DB_TO_DISK_METHOD \u4fdd\u5b58\u6570\u636e\u5e93\u5230\u78c1\u76d8\u7684\u65b9\u6cd5 'standard' \u4e0d\u9700\u8981\u4efb\u4f55\u8bbe\u7f6e 'fast'\u9700\u8981\u624b\u52a8\u5728python\u7684\u5b89\u88c5\u76ee\u5f55\u4e0b\u6267\u884c`pip install sqlitebck` \u6253\u5305\u7684\u95ee\u9898\u89e3\u51b3\u540e\uff0c'fast'\u5373\u88ab\u4f5c\u4e3a\u9ed8\u8ba4\u65b9\u5f0f \u6570\u636e\u76f8\u5173\u7684\u9009\u9879: -H, --skip-header \u5ffd\u7565\u8868\u5934\uff0c\u5728\u65e9\u671f\u7684\u7248\u672c\u4e2d\u5df2\u4fee\u6539\u4e3a\uff1a\u4ec5\u652f\u6301\u7528\u4e8e\u6807\u660e\u5217\u540d\u7684\u4e00\u884c\u8868\u5934 -d DELIMITER, --delimiter=DELIMITER \u5217\u5206\u9694\u7b26\uff0c\u82e5\u65e0\u7279\u522b\u6307\u5b9a\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u683c\u7b26 -p, --pipe-delimited \u4f5c\u7528\u540c -d '|'\uff0c\u4e3a\u4e86\u65b9\u4fbf\u548c\u53ef\u8bfb\u6027\u63d0\u4f9b\u8be5\u53c2\u6570 -t, --tab-delimited \u4f5c\u7528\u540c -d <tab>\uff0c\u8fd9\u4ec5\u662f\u4e00\u79cd\u7b80\u5199\uff0c\u4e5f\u53ef\u4ee5\u5728Linux\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528$'\\t' -e ENCODING, --encoding=ENCODING \u8f93\u5165\u6587\u4ef6\u7684\u7f16\u7801\uff0c\u9ed8\u8ba4\u662fUTF-8 -z, --gzipped \u538b\u7f29\u6570\u636e\uff0c\u5bf9\u4e8e\u4ece\u8f93\u5165\u6d41\u8bfb\u53d6\u6587\u4ef6\u975e\u5e38\u9ad8\u6548 .gz \u662f\u81ea\u52a8\u538b\u7f29\u540e\u6587\u4ef6\u6269\u5c55\u540d -A, --analyze-only \u7b80\u5355\u5206\u6790\uff1a\u5404\u5217\u7684\u6570\u636e\u7c7b\u578b -m MODE, --mode=MODE \u6570\u636e\u89e3\u6790\u6a21\u5f0f: \u677e\u6563, \u5bbd\u677e\u548c\u4e25\u683c\u3002\u5728\u4e25\u683c\u6a21\u5f0f\u4e0b\u5fc5\u987b\u6307\u5b9a -c --column-count \u53c2\u6570\u3002 -c COLUMN_COUNT, --column-count=COLUMN_COUNT \u5f53\u4f7f\u7528\u5bbd\u677e\u6216\u4e25\u683c\u6a21\u5f0f\u65f6\uff0c\u7528\u4e8e\u6307\u5b9a\u5217\u7684\u6570\u91cf -k, --keep-leading-whitespace \u4fdd\u7559\u6bcf\u5217\u524d\u7684\u7a7a\u683c\u3002\u4e3a\u4e86\u4f7f\u5176\u5f00\u7bb1\u5373\u7528\uff0c\u9ed8\u8ba4\u53bb\u9664\u4e86\u5217\u524d\u7684\u7a7a\u683c \u5982\u679c\u6709\u9700\u8981\uff0c\u53ef\u4ee5\u6307\u5b9a\u8be5\u53c2\u6570 --disable-double-double-quoting \u7981\u6b62\u4e00\u5bf9\u53cc\u5f15\u53f7\u7684\u8f6c\u4e49\u3002\u9ed8\u8ba4\u53ef\u4ee5\u4f7f\u7528 \"\" \u8f6c\u4e49\u53cc\u5f15\u53f7 \u4e3b\u8981\u4e3a\u4e86\u5411\u540e\u517c\u5bb9 --disable-escaped-double-quoting \u7981\u6b62\u8f6c\u4e49\u53cc\u5f15\u53f7 \u9ed8\u8ba4\u53ef\u4ee5\u5728\u53cc\u5f15\u53f7\u5b57\u6bb5\u4e2d\u4f7f\u7528 \\\" \u8fdb\u884c\u8f6c\u4e49 \u4e3b\u8981\u4e3a\u4e86\u5411\u540e\u517c\u5bb9 --as-text \u4e0d\u8bc6\u522b\u5217\u7c7b\u578b\uff08\u6240\u6709\u5217\u88ab\u5f53\u4f5c\u6587\u672c\u7c7b\u578b\uff09 -w INPUT_QUOTING_MODE, --input-quoting-mode=INPUT_QUOTING_MODE \u8f93\u5165\u5185\u5bb9\u7684\u8f6c\u4e49\u6a21\u5f0f\uff0c\u53ef\u9009\u503c all\u3001minimal\u3001none \u8be5\u53c2\u6570\u7a0d\u6709\u8bef\u5bfc\u6027\uff0c-W \u6307\u5b9a\u8f93\u51fa\u5185\u5bb9\u7684\u8f6c\u4e49\u6a21\u5f0f -M MAX_COLUMN_LENGTH_LIMIT, --max-column-length-limit=MAX_COLUMN_LENGTH_LIMIT \u8bbe\u7f6e\u5217\u7684\u6700\u5927\u957f\u5ea6 -U, --with-universal-newlines \u8bbe\u7f6e\u901a\u7528\u6362\u884c\u7b26 -U \u53c2\u6570\u5f53\u524d\u4ec5\u9002\u7528\u4e8e\u5e38\u89c4\u6587\u4ef6\uff0c\u8f93\u5165\u6d41\u6216.gz\u7c7b\u6587\u4ef6\u6682\u4e0d\u652f\u6301 \u8f93\u51fa\u76f8\u5173\u7684\u9009\u9879: -D OUTPUT_DELIMITER, --output-delimiter=OUTPUT_DELIMITER \u8f93\u51fa\u5217\u95f4\u7684\u5206\u9694\u7b26 \u82e5\u672a\u6307\u5b9a\uff0c\u5219\u4e0e -d \u6307\u5b9a\u7684\u5206\u9694\u7b26\u76f8\u540c\uff1b\u82e5\u5747\u4e3a\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4e3a\u7a7a\u683c\u7b26 -P, --pipe-delimited-output \u540c -D '|' \u4e3a\u4e86\u65b9\u4fbf\u548c\u53ef\u8bfb\u6027\u63d0\u4f9b\u8be5\u53c2\u6570 -T, --tab-delimited-output \u540c -D <tab> \u8fd9\u4ec5\u662f\u4e00\u79cd\u7b80\u5199\uff0c\u4e5f\u53ef\u4ee5\u5728Linux\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528$'\\t' -O, --output-header \u8f93\u51fa\u8868\u5934\uff0c\u8f93\u51fa\u7684\u5217\u540d\u662f\u7531\u67e5\u8be2\u4e2d\u6307\u5b9a\u7684\u522b\u540d \u5982: 'select name FirstName, value1/value2 MyCalculation from ...' \u5373\u4f7f\u8f93\u5165\u65f6\u672a\u6307\u5b9a\u8868\u5934\u4ecd\u53ef\u4f7f\u7528\u8be5\u53c2\u6570\u3002 -b, --beautify \u7f8e\u5316\u8f93\u51fa\u7ed3\u679c\uff0c\u53ef\u80fd\u8f83\u6162... -f FORMATTING, --formatting=FORMATTING \u683c\u5f0f\u5316\u8f93\u51fa\u5217 \u5982\u683c\u5f0fX=fmt\uff0cY=fmt\u7b49\uff0c\u4e0a\u8ff0\u4e2d\u7684X\u3001Y\u662f\u6307\u7b2c\u51e0\u5217\uff08\u5982\uff1a1 \u8868\u793a SELECT \u7684\u7b2c\u4e00\u5217) -E OUTPUT_ENCODING, --output-encoding=OUTPUT_ENCODING \u8f93\u51fa\u5185\u5bb9\u7684\u7f16\u7801\uff0c\u9ed8\u8ba4\u662f 'none'\uff0c\u8ddf\u968f\u7cfb\u7edf\u6216\u7ec8\u7aef\u7684\u7f16\u7801 -W OUTPUT_QUOTING_MODE, --output-quoting-mode=OUTPUT_QUOTING_MODE \u8f93\u51fa\u5185\u5bb9\u7684\u8f6c\u4e49\u6a21\u5f0f\uff0c\u53ef\u9009\u503c all\u3001minimal\u3001none \u8be5\u53c2\u6570\u7a0d\u6709\u8bef\u5bfc\u6027\uff0c-w \u6307\u5b9a\u8f93\u5165\u5185\u5bb9\u7684\u8f6c\u4e49\u6a21\u5f0f -L, --list-user-functions \u5217\u51fa\u6240\u6709\u5185\u7f6e\u51fd\u6570 \u67e5\u8be2\u76f8\u5173\u7684\u53c2\u6570: -q QUERY_FILENAME, --query-filename=QUERY_FILENAME \u6307\u5b9a\u6587\u4ef6\u540d\uff0c\u7531\u6587\u4ef6\u4e2d\u8bfb\u53d6\u67e5\u8be2\u8bed\u53e5\u3002 \u8be5\u64cd\u4f5c\u5e38\u4e0e\u67e5\u8be2\u7f16\u7801\uff08\u4f7f\u7528 -Q)\u4e00\u540c\u4f7f\u7528 -Q QUERY_ENCODING, --query-encoding=QUERY_ENCODING \u67e5\u8be2\u7f16\u7801(\u5305\u542b\u67e5\u8be2\u8bed\u53e5\u7684\u6587\u4ef6\u7f16\u7801) \u5b9e\u9a8c\u6027\u53c2\u6570\uff0c\u5bf9\u8be5\u53c2\u6570\u7684\u610f\u89c1\u53ef\u53cd\u9988 \u793a\u4f8b \u00b6 \u4e0b\u8ff0 -H \u53c2\u6570\u7684\u4f8b\u5b50\uff0c\u8868\u793a\u6587\u4ef6\u4e2d\u542b\u6709\u8868\u5934\u65f6\u4f7f\u7528\u8be5\u53c2\u6570\u3002 -t \u53c2\u6570\u662f\u6307\u5b9a\u6587\u4ef6\u4ee5 tab \u4f5c\u4e3a\u5206\u9694\u7b26\u7684\u7f29\u5199\uff08\u53ef\u4ee5\u4f7f\u7528 -d \u53c2\u6570\u6307\u5b9a\u4efb\u610f\u5206\u9694\u7b26\uff09\u3002 \u4e3a\u4e86\u6e05\u695a\u8d77\u89c1\uff0c\u67e5\u8be2\u5173\u952e\u5b57\u5747\u4f7f\u7528\u5927\u5199\uff0c\u5b9e\u9645\u4e0a\u5173\u952e\u5b57(\u5982 SELECT\u3001WHERE\u7b49)\u5bf9\u5927\u5c0f\u5199\u5e76\u4e0d\u654f\u611f\u3002 \u793a\u4f8b\u76ee\u5f55: \u4f8b1 - \u7edf\u8ba1\u6307\u5b9a\u5217\u552f\u4e00\u503c\u7684\u6570\u91cf \u4f8b2 - \u6570\u503c\u6761\u4ef6\u8fc7\u6ee4\u3001\u6392\u5e8f\u5e76\u9650\u5236\u8f93\u51fa\u6570 \u4f8b3 - GROUP BY\u7b80\u5355\u793a\u4f8b \u4f8b4 - GROUP BY\u8fdb\u9636\u793a\u4f8b (\u4ee5\u65f6\u95f4\u683c\u5f0f\u5206\u7ec4) \u4f8b5 - \u6807\u51c6\u8f93\u5165\u6d41\u4f5c\u4e3a\u8f93\u5165 \u4f8b6 - \u4f7f\u7528\u8868\u5934\u4e2d\u5217\u540d \u4f8b7 - JOIN \u4e24\u4e2a\u6587\u4ef6 \u4f8b1 \u00b6 \u5bf9\u6307\u5b9a\u5b57\u6bb5\uff08\u70b9\u51fb\u6570\u636e\u4e2d\u7684uuid\uff09\u6267\u884c COUNT DISTINCT q -H -t \"SELECT COUNT(DISTINCT(uuid)) FROM ./clicks.csv\" \u8f93\u51fa: 229 \u4f8b2 \u00b6 \u8fc7\u6ee4\u6570\u503c\u6570\u636e\u3001\u6392\u5e8f\u5e76\u9650\u5236\u8f93\u51fa\u6570\u91cf \u6ce8\u610f\uff1aq \u5c06\u5176\u770b\u4f5c\u6570\u503c\u7c7b\u578b\u5e76\u5bf9\u5176\u8fdb\u884c\u6570\u503c\u8fc7\u6ee4(\u6570\u503c\u6bd4\u8f83\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u6bd4\u8f83) q -H -t \"SELECT request_id,score FROM ./clicks.csv WHERE score > 0.7 ORDER BY score DESC LIMIT 5\" \u8f93\u51fa: 2cfab5ceca922a1a2179dc4687a3b26e 1.0 f6de737b5aa2c46a3db3208413a54d64 0.986665809568 766025d25479b95a224bd614141feee5 0.977105183282 2c09058a1b82c6dbcf9dc463e73eddd2 0.703255121794 \u4f8b3 \u00b6 GROUP BY \u7b80\u5355\u793a\u4f8b q -t -H \"SELECT hashed_source_machine,count(*) FROM ./clicks.csv GROUP BY hashed_source_machine\" \u8f93\u51fa: 47d9087db433b9ba.domain.com 400000 \u4f8b4 \u00b6 GROUP BY\u8fdb\u9636\u793a\u4f8b (\u4ee5\u65f6\u95f4\u683c\u5f0f\u5206\u7ec4) q -t -H \"SELECT strftime('%H:%M',date_time) hour_and_minute,count(*) FROM ./clicks.csv GROUP BY hour_and_minute\" \u8f93\u51fa: 07:00 138148 07:01 140026 07:02 121826 \u4f8b5 \u00b6 \u6807\u51c6\u8f93\u5165\u6d41\u4f5c\u4e3a\u8f93\u5165 \u8ba1\u7b97 /tmp \u76ee\u5f55\u4e0b\u5404 user/group \u7684\u5360\u7528\u7a7a\u95f4\u5927\u5c0f sudo find /tmp -ls | q \"SELECT c5,c6,sum(c7)/1024.0/1024 AS total FROM - GROUP BY c5,c6 ORDER BY total desc\" \u8f93\u51fa: mapred hadoop 304.00390625 root root 8.0431451797485 smith smith 4.34389972687 \u4f8b6 \u00b6 \u4f7f\u7528\u8868\u5934\u4e2d\u5217\u540d \u8ba1\u7b97\u62e5\u6709\u8fdb\u7a0b\u6570\u6700\u591a\u7684\u524d3\u4f4d\u7528\u6237\u540d\u53ca\u5176\u6570\u91cf \u6ce8\u610f: \u8be5\u67e5\u8be2\u4e2d\u81ea\u52a8\u8bc6\u522b\u4e86\u5217\u540d ps -ef | q -H \"SELECT UID,COUNT(*) cnt FROM - GROUP BY UID ORDER BY cnt DESC LIMIT 3\" \u8f93\u51fa: root 152 harel 119 avahi 2 \u4f8b7 \u00b6 JOIN \u4e24\u4e2a\u6587\u4ef6 \u5982\u4e0b\u547d\u4ee4\u4e2dJOIN\u4e00\u4e2als\u547d\u4ee4\u8f93\u51fa\u5185\u5bb9\u6587\u4ef6\uff08exampledatafile) \u548c\u4e00\u4e2a\u5305\u542bgroup_name\u3001email\u4e24\u5217\u5b57\u6bb5\u7684\u6587\u4ef6\uff08group-emails-example)\uff0c\u6bcf\u4e00\u90ae\u4ef6\u7ec4\u5747\u5305\u542bfilename\u3001email\u5217, \u4e3a\u4e86\u8f93\u51fa\u7b80\u4fbf\uff0c\u4f7f\u7528WHERE\u6761\u4ef6\u8fc7\u6ee4\u51fa\u540d\u4e3a ppp \u7684\u6587\u4ef6 q \"SELECT myfiles.c8,emails.c2 FROM exampledatafile myfiles JOIN group-emails-example emails ON (myfiles.c4 = emails.c1) WHERE myfiles.c8 = 'ppp'\" \u8f93\u51fa: ppp dip.1@otherdomain.com ppp dip.2@otherdomain.com \u53ef\u4ee5\u770b\u51fa ppp \u6587\u4ef6\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u6bcf\u6b21\u90fd\u5339\u914d\u5230\u4e86\u5b83\u6240\u5c5e\u7684dip\u90ae\u4ef6\u7ec4\uff08\u5982\u4f8b\u4e2d dip.1@... / dip2@...)\uff0c\u53ef\u4ee5\u5728 exampledatafile \u548c group-emails-example \u6587\u4ef6\u4e2d\u67e5\u770b\u6570\u636e\u3002 JOIN \u7684\u5e94\u7528\u573a\u666f\u4e2d\u4e5f\u652f\u6301\u5217\u540d\u8bc6\u522b\uff0c\u5728\u67e5\u8be2\u5305\u542b\u8868\u5934\u7684\u6587\u4ef6\u65f6\uff0c\u53ea\u9700\u6307\u5b9a -H \u53c2\u6570\u5373\u53ef\u3002 \u58f0\u660e \u00b6 \u4e3a\u4e86\u907f\u514d\u5f15\u7528\u5916\u90e8\u4f9d\u8d56\uff0c\u5f53\u524d\u662f\u4f7f\u7528\u7531Python\u7f16\u5199\u7684\u5185\u5b58\u6570\u636e\u5e93\u5b9e\u73b0\u7684\u3002\u5f53\u524d\u662f\u652f\u6301 SELECT \u8bed\u53e5\u53ca \u5404\u79cdJOIN \uff08 \u76ee\u524d\u4ec5\u5728 WHERE \u8bed\u53e5\u4e2d\u652f\u6301\u5b50\u67e5\u8be2)\u3002 \u82e5\u60f3\u5bf9\u6570\u636e\u8fdb\u4e00\u6b65\u5206\u6790\uff0c\u53ef\u4ee5\u4f7f\u7528 --save-db-to-disk \u53c2\u6570\uff0c\u4ee5\u5c06\u7ed3\u679c\u8f93\u51fa\u4e3a sqlite \u6570\u636e\u5e93\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528 sqlite3 \u8bed\u53e5\u6765\u6267\u884c\u67e5\u8be2\u64cd\u4f5c\u3002 \u9700\u8981\u63d0\u793a\u7684\u662f\uff0c\u5f53\u524d\u5e76\u6ca1\u6709\u5bf9\u6570\u636e\u91cf\u7684\u5927\u5c0f\u8fdb\u884c\u68c0\u6d4b\u548c\u9650\u5236 - \u4e5f\u5c31\u662f\u8bf4\uff0c\u9700\u8981\u7528\u6237\u81ea\u5df1\u638c\u63a7\u6587\u4ef6\u5927\u5c0f\u3002 \u8bf7\u52a1\u5fc5\u9605\u8bfb \u9650\u5236 \u5c0f\u8282\u3002 \u5f00\u53d1 \u00b6 \u6d4b\u8bd5 \u00b6 \u6e90\u7801\u4e2d\u5305\u542b\u4e86\u6d4b\u8bd5\u7528\u4f8b\uff0c\u53ef\u4ee5\u901a\u8fc7 test/test-all \u6765\u6267\u884c\u3002\u82e5\u60f3\u8981\u63d0\u4ea4 PR\u7684\u8bdd\uff0c\u4e00\u5b9a\u5148\u786e\u4fdd\u5176\u5747\u6267\u884c\u6210\u529f\u3002 \u9650\u5236 \u00b6 \u5982\u4e0b\u7f57\u5217\u4e86\u4e00\u4e9b\u5df2\u77e5\u7684\u9650\u5236\uff0c\u82e5\u4f60\u7684\u4f7f\u7528\u573a\u666f\u4e2d\u9700\u8981\u7528\u5230\u4ee5\u4e0b\u6807\u660e\u7684\u9650\u5236\uff0c\u8bf7\u8054\u7cfb\u6211\u3002 \u4e0d\u652f\u6301 FROM <subquery> \u4e0d\u652f\u6301\u516c\u7528\u8868\u8868\u8fbe\u5f0f(CTE) \u4e0d\u652f\u6301\u6587\u4ef6\u540d\u4e2d\u5305\u542b\u7a7a\u683c (\u53ef\u4ee5\u5c06\u6587\u4ef6\u4ee5\u6807\u51c6\u8f93\u5165\u6d41\u7684\u65b9\u5f0f\u8f93\u5165 q \u6216\u91cd\u547d\u540d\u6587\u4ef6) \u4e0d\u652f\u6301\u8f83\u5c11\u7528\u5230\u7684\u5b50\u67e5\u8be2 \u539f\u7406 \u00b6 \u4f60\u662f\u5426\u66fe\u7ecf\u76ef\u7740\u5c4f\u5e55\u4e0a\u7684\u6587\u672c\u6587\u4ef6\u53d1\u5446\uff0c\u5e0c\u671b\u5b83\u8981\u662f\u6570\u636e\u5e93\u5c31\u597d\u4e86\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u627e\u51fa\u81ea\u5df1\u60f3\u8981\u7684\u5185\u5bb9\uff1f\u6211\u66fe\u6709\u8fc7\u5f88\u591a\u6b21\uff0c\u6700\u7ec8\u987f\u609f\u3002\u6211\u60f3\u8981\u7684\u4e0d\u662f\u6570\u636e\u5e93\uff0c\u800c\u662f SQL\u3002 SQL \u662f\u4e00\u79cd\u9762\u5411\u6570\u636e\u58f0\u660e\u7684\u8bed\u8a00\uff0c\u5b83\u5141\u8bb8\u81ea\u5b9a\u4e49\u6570\u636e\u5185\u5bb9\u800c\u65e0\u9700\u5173\u5fc3\u5176\u6267\u884c\u8fc7\u7a0b\u3002\u8fd9\u4e5f\u6b63\u662fSQL\u5f3a\u5927\u4e4b\u5904\uff0c\u56e0\u4e3a\u5b83\u5bf9\u4e8e\u6570\u636e'\u6240\u89c1\u5373\u6240\u5f97'\uff0c\u800c\u4e0d\u662f\u5c06\u6570\u636e\u770b\u4f5c\u5b57\u8282\u7801\u3002 \u672c\u5de5\u5177\u7684\u76ee\u7684\u662f\uff1a\u5728\u6587\u672c\u6587\u4ef6\u548cSQL\u4e4b\u95f4\u642d\u5efa\u4e00\u5ea7\u6865\u6881\u3002 \u4e3a\u4ec0\u4e48\u5176\u4ed6Linux\u5de5\u5177\u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\uff1f \u00b6 \u4f20\u7edf\u7684Linux\u5de5\u5177\u5e93\u4e5f\u5f88\u9177\uff0c\u6211\u4e5f\u7ecf\u5e38\u4f7f\u7528\u5b83\u4eec\uff0c \u4f46Linux\u7684\u6574\u4f53\u7406\u5ff5\u662f\u4e3a\u4efb\u4e00\u90e8\u5206\u642d\u914d\u6700\u597d\u7684\u5de5\u5177\u3002\u672c\u5de5\u5177\u4e3a\u4f20\u7edfLinux\u5de5\u5177\u96c6\u65b0\u6dfb\u4e86 SQL \u65cf\u7c7b\u5de5\u5177\uff0c\u5176\u4ed6\u5de5\u5177\u5e76\u4e0d\u4f1a\u5931\u53bb\u672c\u6765\u4f18\u52bf\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4e5f\u7ecf\u5e38\u5c06 q \u548c\u5176\u4ed6Linux\u5de5\u5177\u642d\u914d\u4f7f\u7528\uff0c\u5c31\u5982\u540c\u4f7f\u7528\u7ba1\u9053\u5c06 awk/sed \u548c grep \u642d\u914d\u4f7f\u7528\u4e00\u6837\u3002 \u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f,\u8bb8\u591aLinux\u5de5\u5177\u5c31\u5c06\u6587\u672c\u770b\u4f5c\u6587\u672c\uff0c\u800c\u4e0d\u662f\u6570\u636e\u3002\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u6765\u8bb2\uff0c\u53ef\u4ee5\u5c06 q \u770b\u4f5c\u63d0\u4f9b\u4e86 SQL \u529f\u80fd\uff08\u5982\uff1a\u8868\u8fbe\u5f0f\u3001\u6392\u5e8f\u3001\u5206\u7ec4\u3001\u805a\u5408\u7b49\uff09\u7684\u5143\u5de5\u5177\u3002 \u7406\u5ff5 \u00b6 \u672c\u5de5\u5177\u7684\u8bbe\u8ba1\u9075\u4ece\u4e86 Linux/Unix \u7684\u4f20\u7edf\u8bbe\u8ba1\u539f\u5219\u3002\u82e5\u4f60\u5bf9\u8fd9\u4e9b\u8bbe\u8ba1\u539f\u5219\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u9605\u8bfb \u8fd9\u672c\u4e66 \uff0c\u5c24\u5176\u662f\u4e66\u4e2d \u8fd9\u90e8\u5206 \u82e5\u4f60\u8ba4\u4e3a\u672c\u5de5\u5177\u5de5\u4f5c\u65b9\u5f0f\u4e0e\u4e4b\u80cc\u9053\u800c\u9a70\uff0c\u613f\u6d17\u8033\u606d\u542c\u4f60\u7684\u5efa\u8bae\u3002 \u5c55\u671b \u00b6 \u4e3b\u8981\u65b9\u5411\uff1a\u5c06\u5176\u4f5c\u4e3apython\u7684\u6a21\u5757\u516c\u5f00\u3002 \u5728\u516c\u5f00\u4e4b\u524d\uff0c\u9700\u8981\u5bf9\u5904\u7406\u6807\u51c6\u8f93\u5165\u6d41\u505a\u4e00\u4e9b\u5185\u90e8API\u7684\u5b8c\u5584\u3002 \u652f\u6301\u5206\u5e03\u5f0f\u4ee5\u63d0\u9ad8\u7b97\u529b\u3002","title":"\u9996\u9875"},{"location":"index_cn/#q-csvtsvsql","text":"","title":"q - \u76f4\u63a5\u5728CSV\u6216TSV\u6587\u4ef6\u4e0a\u8fd0\u884cSQL"},{"location":"index_cn/#_1","text":"q \u662f\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u884c\u5728 CSV / TSV \u6587\u4ef6(\u6216\u5176\u4ed6\u8868\u683c\u5f0f\u7684\u6587\u672c\u6587\u4ef6)\u4e0a\u8fd0\u884c\u7c7bSQL\u547d\u4ee4\u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002 q \u5c06\u666e\u901a\u6587\u672c\uff08\u5982\u4e0a\u8ff0\uff09\u4f5c\u4e3a\u6570\u636e\u5e93\u8868\uff0c\u4e14\u652f\u6301\u6240\u6709\u7684SQL\u8bed\u6cd5\u5982\uff1aWHERE\u3001GROUP BY\u3001\u5404\u79cdJOIN\u7b49\u3002\u6b64\u5916\uff0c\u8fd8\u62e5\u6709\u81ea\u52a8\u8bc6\u522b\u5217\u540d\u548c\u5217\u7c7b\u578b\u53ca\u5e7f\u6cdb\u652f\u6301\u591a\u79cd\u7f16\u7801\u7684\u7279\u6027\u3002 q \"SELECT COUNT(*) FROM ./clicks_file.csv WHERE c3 > 32.3\" ps -ef | q -H \"SELECT UID,COUNT(*) cnt FROM - GROUP BY UID ORDER BY cnt DESC LIMIT 3\" \u67e5\u770b \u793a\u4f8b \u6216 \u5b89\u88c5 \u4f53\u9a8c. \u5b8c\u5168\u652f\u6301\u6240\u6709\u7684\u5b57\u7b26\u7f16\u7801 \u3059\u3079\u3066\u306e\u6587\u5b57\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5b8c\u5168\u306b\u30b5\u30dd\u30fc\u30c8 \ubaa8\ub4e0 \ubb38\uc790 \uc778\ucf54\ub529\uc774 \uc644\ubcbd\ud558\uac8c \uc9c0\uc6d0\ub429\ub2c8\ub2e4 \u0432\u0441\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u975e\u82f1\u8bed\u7528\u6237: q \u5b8c\u5168\u652f\u6301\u6240\u6709\u7c7b\u578b\u7684\u5b57\u7b26\u7f16\u7801\u3002 \u4f7f\u7528 -e data-encoding \u8bbe\u7f6e\u8f93\u5165\u7f16\u7801; \u4f7f\u7528 -Q query-encoding \u8bbe\u7f6e\u67e5\u8be2\u7f16\u7801; \u4f7f\u7528 -E output-encoding \u8bbe\u7f6e\u8f93\u51fa\u7f16\u7801; \u5982\u4e0a\u4e09\u4e2a\u53c2\u6570\u5747\u8bbe\u6709\u5408\u7406\u7684\u9ed8\u8ba4\u503c\u3002 \u5982\u679c\u9047\u5230\u95ee\u9898\u8bf7\u4e0e\u6211\u8054\u7cfb\uff0c\u671f\u5f85\u4e0e\u4f60\u4ea4\u6d41\u3002 \u542b\u6709BOM\u7684\u6587\u4ef6: python\u7684csv\u6a21\u5757\u5e76\u4e0d\u80fd\u5f88\u597d\u7684\u652f\u6301\u542b\u6709 Byte Order Mark \u7684\u6587\u4ef6\u3002\u9488\u5bf9\u8be5\u79cd\u60c5\u51b5\uff0c\u4f7f\u7528 -e utf-8-sig \u547d\u4ee4\u53c2\u6570\u53ef\u8bfb\u53d6\u5305\u542bBOM\u7684UTF8\u7f16\u7801\u6587\u4ef6\u3002 \u6211\u4eec\u8ba1\u5212\u5c06BOM\u76f8\u5173\u5904\u7406\u4e0e\u7f16\u7801'\u89e3\u8026', \u8fd9\u6837\u5c31\u53ef\u4ee5\u652f\u6301\u6240\u6709\u7f16\u7801\u7684BOM\u6587\u4ef6\u4e86\u3002","title":"\u6982\u8ff0"},{"location":"index_cn/#_2","text":"\u683c\u5f0f \u8bf4\u660e \u5907\u6ce8 OSX \u8fd0\u884c brew install q \u8be5\u65b9\u5f0f\u6682\u4e0d\u652f\u6301MAN\u624b\u518c, \u53ef\u4ee5\u4f7f\u7528 q --help \u67e5\u770b\u5e2e\u52a9 RPM Package \u8fd0\u884c rpm -ivh <package-filename> \u5982\u679c\u5b89\u88c5\u8fc7\u65e7\u7248\u5219\u8fd0\u884c rpm -U <package-filename> \u8be5\u65b9\u5f0f\u652f\u6301MAN\u624b\u518c\uff0c\u53ef\u8fd0\u884c man q \u67e5\u770b DEB Package \u8fd0\u884c sudo dpkg -i <package-filename> \u8be5\u65b9\u5f0f\u652f\u6301MAN\u624b\u518c\uff0c\u53ef\u8fd0\u884c man q \u67e5\u770b Windows Installer \u8fd0\u884c\u5b89\u88c5\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4e00\u76f4\u70b9\u51fb\u4e0b\u4e00\u6b65\u3001\u4e0b\u4e00\u6b65... q.exe \u5c06\u88ab\u6dfb\u52a0\u81f3PATH\uff0c\u4ee5\u4fbf\u4e8e\u968f\u5904\u8fd0\u884c PATH\u66f4\u65b0\u540e\u5e76\u4e0d\u4f1a\u5373\u65f6\u751f\u6548\uff0c\u91cd\u65b0\u6253\u5f00cmd\u547d\u4ee4\u7a97\u53e3\u4fbf\u53ef tar.gz \u6700\u65b0\u7a33\u5b9a\u7248\u7684\u6240\u6709\u6e90\u7801\u6587\u4ef6\u3002\u63d0\u793a\uff0cq.py \u6587\u4ef6\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u9700\u8981python\u4f9d\u8d56 zip \u6700\u65b0\u7a33\u5b9a\u7248\u7684\u6240\u6709\u6e90\u7801\u6587\u4ef6\u3002\u63d0\u793a\uff0cq.py \u6587\u4ef6\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u9700\u8981python\u4f9d\u8d56 \u65e7\u7248\u672c\u53ef\u4ee5\u5728\u8fd9\u513f \u4e0b\u8f7d \u3002\u6309\u7406\u8bf4\u4e0d\u4f1a\u6709\u4eba\u613f\u610f\u7528\u65e7\u7248\u672c\uff0c\u8981\u662f\u4f60\u8ba1\u5212\u4f7f\u7528\u65e7\u7248\uff0c\u5e0c\u671b\u80fd\u4e0e\u4f60\u4ea4\u6d41\u3002","title":"\u5b89\u88c5"},{"location":"index_cn/#_3","text":"\u4ece 2.0.9 \u7248\u672c\u5f00\u59cb\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u5916\u90e8\u4f9d\u8d56\u3002Python(3.7)\u548c\u5176\u4ed6\u6240\u9700\u7684\u5e93\u5305\u542b\u5728\u4e86\u5b89\u88c5\u6587\u4ef6\u4e2d\u4e14\u4e0e\u7cfb\u7edf\u9694\u79bb\u3002","title":"\u987b\u77e5"},{"location":"index_cn/#_4","text":"q <flags> \"<query>\" \u6700\u7b80\u5355\u7684\u6267\u884c\u8bed\u53e5\uff1aq \"SELECT * FROM myfile\" \u8be5\u8bed\u53e5\u4f1a\u8f93\u51fa\u6587\u4ef6\u5185\u5bb9 q \u652f\u6301\u5728\u8868\u683c\u5f0f\u7684\u6587\u672c\u4e0a\u6267\u884c\u7c7bSQL\u547d\u4ee4\u3002\u5b83\u7684\u521d\u8877\u662f\u4e3aLinux\u547d\u4ee4\u884c\u9644\u52a0SQL\u7684\u8868\u8fbe\u529b\u4e14\u5b9e\u73b0\u5bf9\u6587\u672c\u6570\u636e\u7684\u8f7b\u677e\u8bbf\u95ee\u3002 \u7c7bSQL\u7684\u67e5\u8be2\u5c06 \u6587\u4ef6\u540d(\u6216\u6807\u51c6\u8f93\u5165\u6d41)\u770b\u4f5c\u8868\u540d \u3002\u67e5\u8be2\u8bed\u53e5\u4f1a\u4f5c\u4e3a\u547d\u4ee4\u8f93\u5165\u7684\u4e00\u4e2a\u53c2\u6570\uff08\u4f7f\u7528\u5f15\u53f7\u5305\u88f9)\uff0c\u5982\u679c\u5c06\u591a\u4e2a\u6587\u4ef6\u770b\u4f5c\u4e00\u5f20\u8868\uff0c\u53ef\u4ee5\u8fd9\u6837\u5199 \u6587\u4ef6\u540d1+\u6587\u4ef6\u540d2.... \u6216\u8005\u4f7f\u7528\u901a\u914d\u7b26\uff08\u6bd4\u5982\uff1a my_files*.csv )\u3002 \u4f7f\u7528 -H \u8868\u793a\u8f93\u5165\u5185\u5bb9\u4e2d\u5305\u542b\u8868\u5934\u3002\u8be5\u60c5\u51b5\u4e0b\u5217\u540d\u4f1a\u88ab\u81ea\u52a8\u8bc6\u522b\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u8be5\u53c2\u6570\uff0c\u5217\u540d\u5c06\u4f1a\u88ab\u4ee5 cX \u547d\u540d\uff0c X \u4ece1\u5f00\u59cb\uff08\u6bd4\u5982: q \"SELECT c3,c8 from ...\" ) \u3002 \u4f7f\u7528 -d \u58f0\u660e\u8f93\u5165\u7684\u5206\u9694\u7b26\u3002 \u5217\u7c7b\u578b\u53ef\u7531\u5de5\u5177\u81ea\u52a8\u8bc6\u522b\uff0c\u65e0\u9700\u5f3a\u5236\u8f6c\u6362\u3002 \u63d0\u793a\uff0c\u4f7f\u7528 --as-text \u53ef\u4ee5\u5f3a\u5236\u5c06\u6240\u6709\u5217\u7c7b\u578b\u8f6c\u6362\u4e3a\u6587\u672c\u7c7b\u578b\u3002 \u4f9d\u636esqlite\u89c4\u8303\uff0c\u5982\u679c\u5217\u540d\u4e2d\u542b\u6709\u7a7a\u683c\uff0c\u9700\u8981\u4f7f\u7528\u53cd\u5f15\u53f7 (\u5373\uff1a`) \u5f15\u8d77\u6765\u3002 \u5b8c\u5168\u652f\u6301\u67e5\u8be2/\u8f93\u5165/\u8f93\u51fa\u7684\u7f16\u7801\u8bbe\u7f6e\uff08q \u529b\u4e89\u63d0\u4f9b\u4e00\u79cd\u5f00\u7bb1\u5373\u7528\u7684\u65b9\u6cd5), \u53ef\u4ee5\u5206\u522b\u4f7f\u7528 -Q , -e \u548c -E \u6765\u6307\u5b9a\u7f16\u7801\u8bbe\u7f6e\u7c7b\u578b\u3002 \u652f\u6301\u6240\u6709\u7684sqlite3 SQL\u65b9\u6cd5\uff0c\u5305\u62ec\u6587\u4ef6\u4e4b\u95f4\u7684 JOIN\uff08\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8bbe\u7f6e\u522b\u540d\uff09\u64cd\u4f5c\u3002\u5728\u4e0b\u9762\u7684 \u9650\u5236 \u5c0f\u8282\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u5c11\u6709\u4f7f\u7528\u7684\u3001\u6b20\u652f\u6301\u7684\u8bf4\u660e\u3002","title":"\u4f7f\u7528"},{"location":"index_cn/#_5","text":"q \u7684\u6bcf\u4e00\u4e2a\u53c2\u6570\u90fd\u662f\u7531\u53cc\u5f15\u53f7\u5305\u88f9\u7684\u4e00\u6761\u5b8c\u6574\u7684SQL\u8bed\u53e5\u3002\u6240\u6709\u7684\u67e5\u8be2\u8bed\u53e5\u4f1a\u4f9d\u6b21\u6267\u884c\uff0c\u6700\u7ec8\u7ed3\u679c\u4ee5\u6807\u51c6\u8f93\u51fa\u6d41\u5f62\u5f0f\u8f93\u51fa\u3002 \u63d0\u793a\uff0c\u5728\u540c\u4e00\u547d\u4ee4\u884c\u4e2d\u6267\u884c\u591a\u6761\u67e5\u8be2\u8bed\u53e5\u65f6\uff0c\u4ec5\u5728\u6267\u884c\u7b2c\u4e00\u6761\u67e5\u8be2\u8bed\u53e5\u65f6\u9700\u8981\u8017\u65f6\u8f7d\u5165\u6570\u636e\uff0c\u5176\u4ed6\u67e5\u8be2\u8bed\u53e5\u5373\u65f6\u6267\u884c\u3002 \u652f\u6301\u6240\u6709\u6807\u51c6SQL\u8bed\u6cd5\uff0c\u6761\u4ef6\uff08WHERE \u548c HAVING\uff09\u3001GROUP BY\u3001ORDER BY\u7b49\u3002 \u5728WHERE\u6761\u4ef6\u67e5\u8be2\u4e2d\uff0c\u652f\u6301JOIN\u64cd\u4f5c\u548c\u5b50\u67e5\u8be2\uff0c\u4f46\u5728FROM\u5b50\u53e5\u4e2d\u5e76\u4e0d\u652f\u6301\u3002JOIN\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8d77\u522b\u540d\u3002 SQL\u8bed\u6cd5\u540csqlite\u7684\u8bed\u6cd5\uff0c\u8be6\u60c5\u89c1 http://www.sqlite.org/lang.html \u6216\u4e0a\u7f51\u627e\u4e00\u4e9b\u793a\u4f8b\u3002 \u6ce8\u610f \uff1a \u652f\u6301\u6240\u6709\u7c7b\u578b\u7684\u81ea\u52a8\u8bc6\u522b\uff0c\u65e0\u9700\u5f3a\u5236\u8f6c\u6362\u6216\u5176\u4ed6\u64cd\u4f5c\u3002 \u5982\u679c\u91cd\u547d\u540d\u8f93\u51fa\u5217\uff0c\u5219\u9700\u8981\u4e3a\u5217\u6307\u5b9a\u522b\u540d\u5e76\u4f7f\u7528 -O \u58f0\u660e\u3002\u5982: q -O -H \"select count(*) cnt,sum(*) as mysum from -\" \u4fbf\u4f1a\u5c06 cnt \u548c mysum \u4f5c\u4e3a\u5217\u540d\u8f93\u51fa\u3002","title":"\u67e5\u8be2"},{"location":"index_cn/#_6","text":"\u4f7f\u7528: q \u652f\u6301\u5728\u8868\u683c\u5f0f\u7684\u6587\u672c\u6570\u636e\u4e0a\u6267\u884c\u7c7bSQL\u67e5\u8be2\u3002 \u5b83\u7684\u521d\u8877\u662f\u4e3aLinux\u547d\u4ee4\u884c\u9644\u52a0SQL\u7684\u8868\u8fbe\u529b\u4e14\u5b9e\u73b0\u5bf9\u6587\u672c\u6570\u636e\u7684\u8f7b\u677e\u8bbf\u95ee\u3002 \u57fa\u672c\u64cd\u4f5c\u662f q \"SQL\u67e5\u8be2\u8bed\u53e5\" \u8868\u540d\u4fbf\u662f\u6587\u4ef6\u540d\uff08\u4f7f\u7528 - \u4ece\u6807\u6ce8\u8f93\u5165\u4e2d\u8bfb\u53d6\u6570\u636e\uff09\u3002\u82e5\u8f93\u5165\u5185\u5bb9\u5305\u542b\u8868\u5934\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 -H \u6307\u5b9a\u5217\u540d\u3002\u82e5\u65e0\u8868\u5934\uff0c\u5219\u5217\u5c06\u4f1a\u81ea\u52a8\u547d\u540d\u4e3a c1...cN\u3002 \u5217\u7c7b\u578b\u53ef\u88ab\u81ea\u52a8\u8bc6\u522b\u3002\u53ef\u4ee5\u4f7f\u7528 -A \u547d\u4ee4\u67e5\u770b\u6bcf\u5217\u7684\u540d\u79f0\u53ca\u5176\u7c7b\u578b\u3002 \u53ef\u4ee5\u4f7f\u7528 -d (\u6216 -t) \u6307\u5b9a\u5206\u9694\u7b26\uff0c\u4f7f\u7528 -D \u6307\u5b9a\u8f93\u51fa\u5206\u5272\u7b26\u3002 \u652f\u6301\u6240\u6709\u7684sqlite3 SQL\u65b9\u6cd5\u3002 \u793a\u4f8b: \u4f8b\u5b501: ls -ltrd * | q \"select c1,count(1) from - group by c1\" \u4e0a\u4f8b\u5c06\u4f1a\u8f93\u51fa\u5f53\u524d\u76ee\u5f55\u4e0b\uff0c\u6240\u6709\u6587\u4ef6\u7684\u6743\u9650\u8868\u8fbe\u5f0f\u5206\u7ec4\u53ca\u6bcf\u7ec4\u6570\u91cf\u3002 \u4f8b\u5b502: seq 1 1000 | q \"select avg(c1),sum(c1) from -\" \u4e0a\u4f8b\u5c06\u4f1a\u8f93\u51fa1\u52301000\u7684\u5e73\u5747\u6570\u4e0e\u548c\u6570\u3002 \u4f8b\u5b503: sudo find /tmp -ls | q \"select c5,c6,sum(c7)/1024.0/1024 as total from - group by c5,c6 order by total desc\" \u4e0a\u4f8b\u5c06\u4f1a\u8f93\u51fa\u5728/tmp\u76ee\u5f55\u4e0b\uff0c\u76f8\u540c'\u7528\u6237+\u7ec4'\u7684\u6587\u4ef6\u6240\u5360\u7528\u7684MB\u78c1\u76d8\u7a7a\u95f4\u3002 \u66f4\u591a\u8be6\u60c5\u89c1 https://github.com/harelba/q/ \u6216\u67e5\u770b\u5e2e\u52a9 \u9009\u9879\uff1a -h, --help \u663e\u793a\u6b64\u5e2e\u52a9\u4fe1\u606f\u5e76\u9000\u51fa -v, --version \u663e\u793a\u7248\u672c\u53f7 -V, --verbose \u51fa\u73b0\u95ee\u9898\u65f6\u663e\u793a\u8c03\u8bd5\u4fe1\u606f -S SAVE_DB_TO_DISK_FILENAME, --save-db-to-disk=SAVE_DB_TO_DISK_FILENAME \u5c06\u6570\u636e\u5e93\u4fdd\u5b58\u4e3a\u4e00\u4e2a sqlite \u6570\u636e\u5e93\u6587\u4ef6 --save-db-to-disk-method=SAVE_DB_TO_DISK_METHOD \u4fdd\u5b58\u6570\u636e\u5e93\u5230\u78c1\u76d8\u7684\u65b9\u6cd5 'standard' \u4e0d\u9700\u8981\u4efb\u4f55\u8bbe\u7f6e 'fast'\u9700\u8981\u624b\u52a8\u5728python\u7684\u5b89\u88c5\u76ee\u5f55\u4e0b\u6267\u884c`pip install sqlitebck` \u6253\u5305\u7684\u95ee\u9898\u89e3\u51b3\u540e\uff0c'fast'\u5373\u88ab\u4f5c\u4e3a\u9ed8\u8ba4\u65b9\u5f0f \u6570\u636e\u76f8\u5173\u7684\u9009\u9879: -H, --skip-header \u5ffd\u7565\u8868\u5934\uff0c\u5728\u65e9\u671f\u7684\u7248\u672c\u4e2d\u5df2\u4fee\u6539\u4e3a\uff1a\u4ec5\u652f\u6301\u7528\u4e8e\u6807\u660e\u5217\u540d\u7684\u4e00\u884c\u8868\u5934 -d DELIMITER, --delimiter=DELIMITER \u5217\u5206\u9694\u7b26\uff0c\u82e5\u65e0\u7279\u522b\u6307\u5b9a\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u683c\u7b26 -p, --pipe-delimited \u4f5c\u7528\u540c -d '|'\uff0c\u4e3a\u4e86\u65b9\u4fbf\u548c\u53ef\u8bfb\u6027\u63d0\u4f9b\u8be5\u53c2\u6570 -t, --tab-delimited \u4f5c\u7528\u540c -d <tab>\uff0c\u8fd9\u4ec5\u662f\u4e00\u79cd\u7b80\u5199\uff0c\u4e5f\u53ef\u4ee5\u5728Linux\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528$'\\t' -e ENCODING, --encoding=ENCODING \u8f93\u5165\u6587\u4ef6\u7684\u7f16\u7801\uff0c\u9ed8\u8ba4\u662fUTF-8 -z, --gzipped \u538b\u7f29\u6570\u636e\uff0c\u5bf9\u4e8e\u4ece\u8f93\u5165\u6d41\u8bfb\u53d6\u6587\u4ef6\u975e\u5e38\u9ad8\u6548 .gz \u662f\u81ea\u52a8\u538b\u7f29\u540e\u6587\u4ef6\u6269\u5c55\u540d -A, --analyze-only \u7b80\u5355\u5206\u6790\uff1a\u5404\u5217\u7684\u6570\u636e\u7c7b\u578b -m MODE, --mode=MODE \u6570\u636e\u89e3\u6790\u6a21\u5f0f: \u677e\u6563, \u5bbd\u677e\u548c\u4e25\u683c\u3002\u5728\u4e25\u683c\u6a21\u5f0f\u4e0b\u5fc5\u987b\u6307\u5b9a -c --column-count \u53c2\u6570\u3002 -c COLUMN_COUNT, --column-count=COLUMN_COUNT \u5f53\u4f7f\u7528\u5bbd\u677e\u6216\u4e25\u683c\u6a21\u5f0f\u65f6\uff0c\u7528\u4e8e\u6307\u5b9a\u5217\u7684\u6570\u91cf -k, --keep-leading-whitespace \u4fdd\u7559\u6bcf\u5217\u524d\u7684\u7a7a\u683c\u3002\u4e3a\u4e86\u4f7f\u5176\u5f00\u7bb1\u5373\u7528\uff0c\u9ed8\u8ba4\u53bb\u9664\u4e86\u5217\u524d\u7684\u7a7a\u683c \u5982\u679c\u6709\u9700\u8981\uff0c\u53ef\u4ee5\u6307\u5b9a\u8be5\u53c2\u6570 --disable-double-double-quoting \u7981\u6b62\u4e00\u5bf9\u53cc\u5f15\u53f7\u7684\u8f6c\u4e49\u3002\u9ed8\u8ba4\u53ef\u4ee5\u4f7f\u7528 \"\" \u8f6c\u4e49\u53cc\u5f15\u53f7 \u4e3b\u8981\u4e3a\u4e86\u5411\u540e\u517c\u5bb9 --disable-escaped-double-quoting \u7981\u6b62\u8f6c\u4e49\u53cc\u5f15\u53f7 \u9ed8\u8ba4\u53ef\u4ee5\u5728\u53cc\u5f15\u53f7\u5b57\u6bb5\u4e2d\u4f7f\u7528 \\\" \u8fdb\u884c\u8f6c\u4e49 \u4e3b\u8981\u4e3a\u4e86\u5411\u540e\u517c\u5bb9 --as-text \u4e0d\u8bc6\u522b\u5217\u7c7b\u578b\uff08\u6240\u6709\u5217\u88ab\u5f53\u4f5c\u6587\u672c\u7c7b\u578b\uff09 -w INPUT_QUOTING_MODE, --input-quoting-mode=INPUT_QUOTING_MODE \u8f93\u5165\u5185\u5bb9\u7684\u8f6c\u4e49\u6a21\u5f0f\uff0c\u53ef\u9009\u503c all\u3001minimal\u3001none \u8be5\u53c2\u6570\u7a0d\u6709\u8bef\u5bfc\u6027\uff0c-W \u6307\u5b9a\u8f93\u51fa\u5185\u5bb9\u7684\u8f6c\u4e49\u6a21\u5f0f -M MAX_COLUMN_LENGTH_LIMIT, --max-column-length-limit=MAX_COLUMN_LENGTH_LIMIT \u8bbe\u7f6e\u5217\u7684\u6700\u5927\u957f\u5ea6 -U, --with-universal-newlines \u8bbe\u7f6e\u901a\u7528\u6362\u884c\u7b26 -U \u53c2\u6570\u5f53\u524d\u4ec5\u9002\u7528\u4e8e\u5e38\u89c4\u6587\u4ef6\uff0c\u8f93\u5165\u6d41\u6216.gz\u7c7b\u6587\u4ef6\u6682\u4e0d\u652f\u6301 \u8f93\u51fa\u76f8\u5173\u7684\u9009\u9879: -D OUTPUT_DELIMITER, --output-delimiter=OUTPUT_DELIMITER \u8f93\u51fa\u5217\u95f4\u7684\u5206\u9694\u7b26 \u82e5\u672a\u6307\u5b9a\uff0c\u5219\u4e0e -d \u6307\u5b9a\u7684\u5206\u9694\u7b26\u76f8\u540c\uff1b\u82e5\u5747\u4e3a\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4e3a\u7a7a\u683c\u7b26 -P, --pipe-delimited-output \u540c -D '|' \u4e3a\u4e86\u65b9\u4fbf\u548c\u53ef\u8bfb\u6027\u63d0\u4f9b\u8be5\u53c2\u6570 -T, --tab-delimited-output \u540c -D <tab> \u8fd9\u4ec5\u662f\u4e00\u79cd\u7b80\u5199\uff0c\u4e5f\u53ef\u4ee5\u5728Linux\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528$'\\t' -O, --output-header \u8f93\u51fa\u8868\u5934\uff0c\u8f93\u51fa\u7684\u5217\u540d\u662f\u7531\u67e5\u8be2\u4e2d\u6307\u5b9a\u7684\u522b\u540d \u5982: 'select name FirstName, value1/value2 MyCalculation from ...' \u5373\u4f7f\u8f93\u5165\u65f6\u672a\u6307\u5b9a\u8868\u5934\u4ecd\u53ef\u4f7f\u7528\u8be5\u53c2\u6570\u3002 -b, --beautify \u7f8e\u5316\u8f93\u51fa\u7ed3\u679c\uff0c\u53ef\u80fd\u8f83\u6162... -f FORMATTING, --formatting=FORMATTING \u683c\u5f0f\u5316\u8f93\u51fa\u5217 \u5982\u683c\u5f0fX=fmt\uff0cY=fmt\u7b49\uff0c\u4e0a\u8ff0\u4e2d\u7684X\u3001Y\u662f\u6307\u7b2c\u51e0\u5217\uff08\u5982\uff1a1 \u8868\u793a SELECT \u7684\u7b2c\u4e00\u5217) -E OUTPUT_ENCODING, --output-encoding=OUTPUT_ENCODING \u8f93\u51fa\u5185\u5bb9\u7684\u7f16\u7801\uff0c\u9ed8\u8ba4\u662f 'none'\uff0c\u8ddf\u968f\u7cfb\u7edf\u6216\u7ec8\u7aef\u7684\u7f16\u7801 -W OUTPUT_QUOTING_MODE, --output-quoting-mode=OUTPUT_QUOTING_MODE \u8f93\u51fa\u5185\u5bb9\u7684\u8f6c\u4e49\u6a21\u5f0f\uff0c\u53ef\u9009\u503c all\u3001minimal\u3001none \u8be5\u53c2\u6570\u7a0d\u6709\u8bef\u5bfc\u6027\uff0c-w \u6307\u5b9a\u8f93\u5165\u5185\u5bb9\u7684\u8f6c\u4e49\u6a21\u5f0f -L, --list-user-functions \u5217\u51fa\u6240\u6709\u5185\u7f6e\u51fd\u6570 \u67e5\u8be2\u76f8\u5173\u7684\u53c2\u6570: -q QUERY_FILENAME, --query-filename=QUERY_FILENAME \u6307\u5b9a\u6587\u4ef6\u540d\uff0c\u7531\u6587\u4ef6\u4e2d\u8bfb\u53d6\u67e5\u8be2\u8bed\u53e5\u3002 \u8be5\u64cd\u4f5c\u5e38\u4e0e\u67e5\u8be2\u7f16\u7801\uff08\u4f7f\u7528 -Q)\u4e00\u540c\u4f7f\u7528 -Q QUERY_ENCODING, --query-encoding=QUERY_ENCODING \u67e5\u8be2\u7f16\u7801(\u5305\u542b\u67e5\u8be2\u8bed\u53e5\u7684\u6587\u4ef6\u7f16\u7801) \u5b9e\u9a8c\u6027\u53c2\u6570\uff0c\u5bf9\u8be5\u53c2\u6570\u7684\u610f\u89c1\u53ef\u53cd\u9988","title":"\u6307\u4ee4"},{"location":"index_cn/#_7","text":"\u4e0b\u8ff0 -H \u53c2\u6570\u7684\u4f8b\u5b50\uff0c\u8868\u793a\u6587\u4ef6\u4e2d\u542b\u6709\u8868\u5934\u65f6\u4f7f\u7528\u8be5\u53c2\u6570\u3002 -t \u53c2\u6570\u662f\u6307\u5b9a\u6587\u4ef6\u4ee5 tab \u4f5c\u4e3a\u5206\u9694\u7b26\u7684\u7f29\u5199\uff08\u53ef\u4ee5\u4f7f\u7528 -d \u53c2\u6570\u6307\u5b9a\u4efb\u610f\u5206\u9694\u7b26\uff09\u3002 \u4e3a\u4e86\u6e05\u695a\u8d77\u89c1\uff0c\u67e5\u8be2\u5173\u952e\u5b57\u5747\u4f7f\u7528\u5927\u5199\uff0c\u5b9e\u9645\u4e0a\u5173\u952e\u5b57(\u5982 SELECT\u3001WHERE\u7b49)\u5bf9\u5927\u5c0f\u5199\u5e76\u4e0d\u654f\u611f\u3002 \u793a\u4f8b\u76ee\u5f55: \u4f8b1 - \u7edf\u8ba1\u6307\u5b9a\u5217\u552f\u4e00\u503c\u7684\u6570\u91cf \u4f8b2 - \u6570\u503c\u6761\u4ef6\u8fc7\u6ee4\u3001\u6392\u5e8f\u5e76\u9650\u5236\u8f93\u51fa\u6570 \u4f8b3 - GROUP BY\u7b80\u5355\u793a\u4f8b \u4f8b4 - GROUP BY\u8fdb\u9636\u793a\u4f8b (\u4ee5\u65f6\u95f4\u683c\u5f0f\u5206\u7ec4) \u4f8b5 - \u6807\u51c6\u8f93\u5165\u6d41\u4f5c\u4e3a\u8f93\u5165 \u4f8b6 - \u4f7f\u7528\u8868\u5934\u4e2d\u5217\u540d \u4f8b7 - JOIN \u4e24\u4e2a\u6587\u4ef6","title":"\u793a\u4f8b"},{"location":"index_cn/#1","text":"\u5bf9\u6307\u5b9a\u5b57\u6bb5\uff08\u70b9\u51fb\u6570\u636e\u4e2d\u7684uuid\uff09\u6267\u884c COUNT DISTINCT q -H -t \"SELECT COUNT(DISTINCT(uuid)) FROM ./clicks.csv\" \u8f93\u51fa: 229","title":"\u4f8b1"},{"location":"index_cn/#2","text":"\u8fc7\u6ee4\u6570\u503c\u6570\u636e\u3001\u6392\u5e8f\u5e76\u9650\u5236\u8f93\u51fa\u6570\u91cf \u6ce8\u610f\uff1aq \u5c06\u5176\u770b\u4f5c\u6570\u503c\u7c7b\u578b\u5e76\u5bf9\u5176\u8fdb\u884c\u6570\u503c\u8fc7\u6ee4(\u6570\u503c\u6bd4\u8f83\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u6bd4\u8f83) q -H -t \"SELECT request_id,score FROM ./clicks.csv WHERE score > 0.7 ORDER BY score DESC LIMIT 5\" \u8f93\u51fa: 2cfab5ceca922a1a2179dc4687a3b26e 1.0 f6de737b5aa2c46a3db3208413a54d64 0.986665809568 766025d25479b95a224bd614141feee5 0.977105183282 2c09058a1b82c6dbcf9dc463e73eddd2 0.703255121794","title":"\u4f8b2"},{"location":"index_cn/#3","text":"GROUP BY \u7b80\u5355\u793a\u4f8b q -t -H \"SELECT hashed_source_machine,count(*) FROM ./clicks.csv GROUP BY hashed_source_machine\" \u8f93\u51fa: 47d9087db433b9ba.domain.com 400000","title":"\u4f8b3"},{"location":"index_cn/#4","text":"GROUP BY\u8fdb\u9636\u793a\u4f8b (\u4ee5\u65f6\u95f4\u683c\u5f0f\u5206\u7ec4) q -t -H \"SELECT strftime('%H:%M',date_time) hour_and_minute,count(*) FROM ./clicks.csv GROUP BY hour_and_minute\" \u8f93\u51fa: 07:00 138148 07:01 140026 07:02 121826","title":"\u4f8b4"},{"location":"index_cn/#5","text":"\u6807\u51c6\u8f93\u5165\u6d41\u4f5c\u4e3a\u8f93\u5165 \u8ba1\u7b97 /tmp \u76ee\u5f55\u4e0b\u5404 user/group \u7684\u5360\u7528\u7a7a\u95f4\u5927\u5c0f sudo find /tmp -ls | q \"SELECT c5,c6,sum(c7)/1024.0/1024 AS total FROM - GROUP BY c5,c6 ORDER BY total desc\" \u8f93\u51fa: mapred hadoop 304.00390625 root root 8.0431451797485 smith smith 4.34389972687","title":"\u4f8b5"},{"location":"index_cn/#6","text":"\u4f7f\u7528\u8868\u5934\u4e2d\u5217\u540d \u8ba1\u7b97\u62e5\u6709\u8fdb\u7a0b\u6570\u6700\u591a\u7684\u524d3\u4f4d\u7528\u6237\u540d\u53ca\u5176\u6570\u91cf \u6ce8\u610f: \u8be5\u67e5\u8be2\u4e2d\u81ea\u52a8\u8bc6\u522b\u4e86\u5217\u540d ps -ef | q -H \"SELECT UID,COUNT(*) cnt FROM - GROUP BY UID ORDER BY cnt DESC LIMIT 3\" \u8f93\u51fa: root 152 harel 119 avahi 2","title":"\u4f8b6"},{"location":"index_cn/#7","text":"JOIN \u4e24\u4e2a\u6587\u4ef6 \u5982\u4e0b\u547d\u4ee4\u4e2dJOIN\u4e00\u4e2als\u547d\u4ee4\u8f93\u51fa\u5185\u5bb9\u6587\u4ef6\uff08exampledatafile) \u548c\u4e00\u4e2a\u5305\u542bgroup_name\u3001email\u4e24\u5217\u5b57\u6bb5\u7684\u6587\u4ef6\uff08group-emails-example)\uff0c\u6bcf\u4e00\u90ae\u4ef6\u7ec4\u5747\u5305\u542bfilename\u3001email\u5217, \u4e3a\u4e86\u8f93\u51fa\u7b80\u4fbf\uff0c\u4f7f\u7528WHERE\u6761\u4ef6\u8fc7\u6ee4\u51fa\u540d\u4e3a ppp \u7684\u6587\u4ef6 q \"SELECT myfiles.c8,emails.c2 FROM exampledatafile myfiles JOIN group-emails-example emails ON (myfiles.c4 = emails.c1) WHERE myfiles.c8 = 'ppp'\" \u8f93\u51fa: ppp dip.1@otherdomain.com ppp dip.2@otherdomain.com \u53ef\u4ee5\u770b\u51fa ppp \u6587\u4ef6\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u6bcf\u6b21\u90fd\u5339\u914d\u5230\u4e86\u5b83\u6240\u5c5e\u7684dip\u90ae\u4ef6\u7ec4\uff08\u5982\u4f8b\u4e2d dip.1@... / dip2@...)\uff0c\u53ef\u4ee5\u5728 exampledatafile \u548c group-emails-example \u6587\u4ef6\u4e2d\u67e5\u770b\u6570\u636e\u3002 JOIN \u7684\u5e94\u7528\u573a\u666f\u4e2d\u4e5f\u652f\u6301\u5217\u540d\u8bc6\u522b\uff0c\u5728\u67e5\u8be2\u5305\u542b\u8868\u5934\u7684\u6587\u4ef6\u65f6\uff0c\u53ea\u9700\u6307\u5b9a -H \u53c2\u6570\u5373\u53ef\u3002","title":"\u4f8b7"},{"location":"index_cn/#_8","text":"\u4e3a\u4e86\u907f\u514d\u5f15\u7528\u5916\u90e8\u4f9d\u8d56\uff0c\u5f53\u524d\u662f\u4f7f\u7528\u7531Python\u7f16\u5199\u7684\u5185\u5b58\u6570\u636e\u5e93\u5b9e\u73b0\u7684\u3002\u5f53\u524d\u662f\u652f\u6301 SELECT \u8bed\u53e5\u53ca \u5404\u79cdJOIN \uff08 \u76ee\u524d\u4ec5\u5728 WHERE \u8bed\u53e5\u4e2d\u652f\u6301\u5b50\u67e5\u8be2)\u3002 \u82e5\u60f3\u5bf9\u6570\u636e\u8fdb\u4e00\u6b65\u5206\u6790\uff0c\u53ef\u4ee5\u4f7f\u7528 --save-db-to-disk \u53c2\u6570\uff0c\u4ee5\u5c06\u7ed3\u679c\u8f93\u51fa\u4e3a sqlite \u6570\u636e\u5e93\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528 sqlite3 \u8bed\u53e5\u6765\u6267\u884c\u67e5\u8be2\u64cd\u4f5c\u3002 \u9700\u8981\u63d0\u793a\u7684\u662f\uff0c\u5f53\u524d\u5e76\u6ca1\u6709\u5bf9\u6570\u636e\u91cf\u7684\u5927\u5c0f\u8fdb\u884c\u68c0\u6d4b\u548c\u9650\u5236 - \u4e5f\u5c31\u662f\u8bf4\uff0c\u9700\u8981\u7528\u6237\u81ea\u5df1\u638c\u63a7\u6587\u4ef6\u5927\u5c0f\u3002 \u8bf7\u52a1\u5fc5\u9605\u8bfb \u9650\u5236 \u5c0f\u8282\u3002","title":"\u58f0\u660e"},{"location":"index_cn/#_9","text":"","title":"\u5f00\u53d1"},{"location":"index_cn/#_10","text":"\u6e90\u7801\u4e2d\u5305\u542b\u4e86\u6d4b\u8bd5\u7528\u4f8b\uff0c\u53ef\u4ee5\u901a\u8fc7 test/test-all \u6765\u6267\u884c\u3002\u82e5\u60f3\u8981\u63d0\u4ea4 PR\u7684\u8bdd\uff0c\u4e00\u5b9a\u5148\u786e\u4fdd\u5176\u5747\u6267\u884c\u6210\u529f\u3002","title":"\u6d4b\u8bd5"},{"location":"index_cn/#_11","text":"\u5982\u4e0b\u7f57\u5217\u4e86\u4e00\u4e9b\u5df2\u77e5\u7684\u9650\u5236\uff0c\u82e5\u4f60\u7684\u4f7f\u7528\u573a\u666f\u4e2d\u9700\u8981\u7528\u5230\u4ee5\u4e0b\u6807\u660e\u7684\u9650\u5236\uff0c\u8bf7\u8054\u7cfb\u6211\u3002 \u4e0d\u652f\u6301 FROM <subquery> \u4e0d\u652f\u6301\u516c\u7528\u8868\u8868\u8fbe\u5f0f(CTE) \u4e0d\u652f\u6301\u6587\u4ef6\u540d\u4e2d\u5305\u542b\u7a7a\u683c (\u53ef\u4ee5\u5c06\u6587\u4ef6\u4ee5\u6807\u51c6\u8f93\u5165\u6d41\u7684\u65b9\u5f0f\u8f93\u5165 q \u6216\u91cd\u547d\u540d\u6587\u4ef6) \u4e0d\u652f\u6301\u8f83\u5c11\u7528\u5230\u7684\u5b50\u67e5\u8be2","title":"\u9650\u5236"},{"location":"index_cn/#_12","text":"\u4f60\u662f\u5426\u66fe\u7ecf\u76ef\u7740\u5c4f\u5e55\u4e0a\u7684\u6587\u672c\u6587\u4ef6\u53d1\u5446\uff0c\u5e0c\u671b\u5b83\u8981\u662f\u6570\u636e\u5e93\u5c31\u597d\u4e86\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u627e\u51fa\u81ea\u5df1\u60f3\u8981\u7684\u5185\u5bb9\uff1f\u6211\u66fe\u6709\u8fc7\u5f88\u591a\u6b21\uff0c\u6700\u7ec8\u987f\u609f\u3002\u6211\u60f3\u8981\u7684\u4e0d\u662f\u6570\u636e\u5e93\uff0c\u800c\u662f SQL\u3002 SQL \u662f\u4e00\u79cd\u9762\u5411\u6570\u636e\u58f0\u660e\u7684\u8bed\u8a00\uff0c\u5b83\u5141\u8bb8\u81ea\u5b9a\u4e49\u6570\u636e\u5185\u5bb9\u800c\u65e0\u9700\u5173\u5fc3\u5176\u6267\u884c\u8fc7\u7a0b\u3002\u8fd9\u4e5f\u6b63\u662fSQL\u5f3a\u5927\u4e4b\u5904\uff0c\u56e0\u4e3a\u5b83\u5bf9\u4e8e\u6570\u636e'\u6240\u89c1\u5373\u6240\u5f97'\uff0c\u800c\u4e0d\u662f\u5c06\u6570\u636e\u770b\u4f5c\u5b57\u8282\u7801\u3002 \u672c\u5de5\u5177\u7684\u76ee\u7684\u662f\uff1a\u5728\u6587\u672c\u6587\u4ef6\u548cSQL\u4e4b\u95f4\u642d\u5efa\u4e00\u5ea7\u6865\u6881\u3002","title":"\u539f\u7406"},{"location":"index_cn/#linux","text":"\u4f20\u7edf\u7684Linux\u5de5\u5177\u5e93\u4e5f\u5f88\u9177\uff0c\u6211\u4e5f\u7ecf\u5e38\u4f7f\u7528\u5b83\u4eec\uff0c \u4f46Linux\u7684\u6574\u4f53\u7406\u5ff5\u662f\u4e3a\u4efb\u4e00\u90e8\u5206\u642d\u914d\u6700\u597d\u7684\u5de5\u5177\u3002\u672c\u5de5\u5177\u4e3a\u4f20\u7edfLinux\u5de5\u5177\u96c6\u65b0\u6dfb\u4e86 SQL \u65cf\u7c7b\u5de5\u5177\uff0c\u5176\u4ed6\u5de5\u5177\u5e76\u4e0d\u4f1a\u5931\u53bb\u672c\u6765\u4f18\u52bf\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4e5f\u7ecf\u5e38\u5c06 q \u548c\u5176\u4ed6Linux\u5de5\u5177\u642d\u914d\u4f7f\u7528\uff0c\u5c31\u5982\u540c\u4f7f\u7528\u7ba1\u9053\u5c06 awk/sed \u548c grep \u642d\u914d\u4f7f\u7528\u4e00\u6837\u3002 \u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f,\u8bb8\u591aLinux\u5de5\u5177\u5c31\u5c06\u6587\u672c\u770b\u4f5c\u6587\u672c\uff0c\u800c\u4e0d\u662f\u6570\u636e\u3002\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u6765\u8bb2\uff0c\u53ef\u4ee5\u5c06 q \u770b\u4f5c\u63d0\u4f9b\u4e86 SQL \u529f\u80fd\uff08\u5982\uff1a\u8868\u8fbe\u5f0f\u3001\u6392\u5e8f\u3001\u5206\u7ec4\u3001\u805a\u5408\u7b49\uff09\u7684\u5143\u5de5\u5177\u3002","title":"\u4e3a\u4ec0\u4e48\u5176\u4ed6Linux\u5de5\u5177\u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\uff1f"},{"location":"index_cn/#_13","text":"\u672c\u5de5\u5177\u7684\u8bbe\u8ba1\u9075\u4ece\u4e86 Linux/Unix \u7684\u4f20\u7edf\u8bbe\u8ba1\u539f\u5219\u3002\u82e5\u4f60\u5bf9\u8fd9\u4e9b\u8bbe\u8ba1\u539f\u5219\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u9605\u8bfb \u8fd9\u672c\u4e66 \uff0c\u5c24\u5176\u662f\u4e66\u4e2d \u8fd9\u90e8\u5206 \u82e5\u4f60\u8ba4\u4e3a\u672c\u5de5\u5177\u5de5\u4f5c\u65b9\u5f0f\u4e0e\u4e4b\u80cc\u9053\u800c\u9a70\uff0c\u613f\u6d17\u8033\u606d\u542c\u4f60\u7684\u5efa\u8bae\u3002","title":"\u7406\u5ff5"},{"location":"index_cn/#_14","text":"\u4e3b\u8981\u65b9\u5411\uff1a\u5c06\u5176\u4f5c\u4e3apython\u7684\u6a21\u5757\u516c\u5f00\u3002 \u5728\u516c\u5f00\u4e4b\u524d\uff0c\u9700\u8981\u5bf9\u5904\u7406\u6807\u51c6\u8f93\u5165\u6d41\u505a\u4e00\u4e9b\u5185\u90e8API\u7684\u5b8c\u5584\u3002 \u652f\u6301\u5206\u5e03\u5f0f\u4ee5\u63d0\u9ad8\u7b97\u529b\u3002","title":"\u5c55\u671b"}]}